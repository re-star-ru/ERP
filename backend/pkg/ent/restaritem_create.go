// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/pkg/photo"
	"backend/pkg/restaritem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	entrestaritem "backend/pkg/ent/restaritem"
)

// RestaritemCreate is the builder for creating a Restaritem entity.
type RestaritemCreate struct {
	config
	mutation *RestaritemMutation
	hooks    []Hook
}

// SetOnecGUID sets the "onecGUID" field.
func (rc *RestaritemCreate) SetOnecGUID(s string) *RestaritemCreate {
	rc.mutation.SetOnecGUID(s)
	return rc
}

// SetName sets the "name" field.
func (rc *RestaritemCreate) SetName(s string) *RestaritemCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetSku sets the "sku" field.
func (rc *RestaritemCreate) SetSku(s string) *RestaritemCreate {
	rc.mutation.SetSku(s)
	return rc
}

// SetItemGUID sets the "itemGUID" field.
func (rc *RestaritemCreate) SetItemGUID(s string) *RestaritemCreate {
	rc.mutation.SetItemGUID(s)
	return rc
}

// SetCharGUID sets the "charGUID" field.
func (rc *RestaritemCreate) SetCharGUID(s string) *RestaritemCreate {
	rc.mutation.SetCharGUID(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RestaritemCreate) SetDescription(s string) *RestaritemCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetInspector sets the "inspector" field.
func (rc *RestaritemCreate) SetInspector(s string) *RestaritemCreate {
	rc.mutation.SetInspector(s)
	return rc
}

// SetInspection sets the "inspection" field.
func (rc *RestaritemCreate) SetInspection(s []string) *RestaritemCreate {
	rc.mutation.SetInspection(s)
	return rc
}

// SetPhotos sets the "photos" field.
func (rc *RestaritemCreate) SetPhotos(ph []photo.Photo) *RestaritemCreate {
	rc.mutation.SetPhotos(ph)
	return rc
}

// SetWorks sets the "works" field.
func (rc *RestaritemCreate) SetWorks(r []restaritem.Work) *RestaritemCreate {
	rc.mutation.SetWorks(r)
	return rc
}

// SetID sets the "id" field.
func (rc *RestaritemCreate) SetID(s string) *RestaritemCreate {
	rc.mutation.SetID(s)
	return rc
}

// Mutation returns the RestaritemMutation object of the builder.
func (rc *RestaritemCreate) Mutation() *RestaritemMutation {
	return rc.mutation
}

// Save creates the Restaritem in the database.
func (rc *RestaritemCreate) Save(ctx context.Context) (*Restaritem, error) {
	var (
		err  error
		node *Restaritem
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaritemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RestaritemCreate) SaveX(ctx context.Context) *Restaritem {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RestaritemCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RestaritemCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RestaritemCreate) check() error {
	if _, ok := rc.mutation.OnecGUID(); !ok {
		return &ValidationError{Name: "onecGUID", err: errors.New(`ent: missing required field "Restaritem.onecGUID"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Restaritem.name"`)}
	}
	if _, ok := rc.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`ent: missing required field "Restaritem.sku"`)}
	}
	if _, ok := rc.mutation.ItemGUID(); !ok {
		return &ValidationError{Name: "itemGUID", err: errors.New(`ent: missing required field "Restaritem.itemGUID"`)}
	}
	if _, ok := rc.mutation.CharGUID(); !ok {
		return &ValidationError{Name: "charGUID", err: errors.New(`ent: missing required field "Restaritem.charGUID"`)}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Restaritem.description"`)}
	}
	if _, ok := rc.mutation.Inspector(); !ok {
		return &ValidationError{Name: "inspector", err: errors.New(`ent: missing required field "Restaritem.inspector"`)}
	}
	if _, ok := rc.mutation.Inspection(); !ok {
		return &ValidationError{Name: "inspection", err: errors.New(`ent: missing required field "Restaritem.inspection"`)}
	}
	if _, ok := rc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "Restaritem.photos"`)}
	}
	if _, ok := rc.mutation.Works(); !ok {
		return &ValidationError{Name: "works", err: errors.New(`ent: missing required field "Restaritem.works"`)}
	}
	return nil
}

func (rc *RestaritemCreate) sqlSave(ctx context.Context) (*Restaritem, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Restaritem.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (rc *RestaritemCreate) createSpec() (*Restaritem, *sqlgraph.CreateSpec) {
	var (
		_node = &Restaritem{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entrestaritem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entrestaritem.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.OnecGUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldOnecGUID,
		})
		_node.OnecGUID = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Sku(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldSku,
		})
		_node.Sku = value
	}
	if value, ok := rc.mutation.ItemGUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldItemGUID,
		})
		_node.ItemGUID = value
	}
	if value, ok := rc.mutation.CharGUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldCharGUID,
		})
		_node.CharGUID = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := rc.mutation.Inspector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrestaritem.FieldInspector,
		})
		_node.Inspector = value
	}
	if value, ok := rc.mutation.Inspection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entrestaritem.FieldInspection,
		})
		_node.Inspection = value
	}
	if value, ok := rc.mutation.Photos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entrestaritem.FieldPhotos,
		})
		_node.Photos = value
	}
	if value, ok := rc.mutation.Works(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entrestaritem.FieldWorks,
		})
		_node.Works = value
	}
	return _node, _spec
}

// RestaritemCreateBulk is the builder for creating many Restaritem entities in bulk.
type RestaritemCreateBulk struct {
	config
	builders []*RestaritemCreate
}

// Save creates the Restaritem entities in the database.
func (rcb *RestaritemCreateBulk) Save(ctx context.Context) ([]*Restaritem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Restaritem, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RestaritemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RestaritemCreateBulk) SaveX(ctx context.Context) []*Restaritem {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RestaritemCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RestaritemCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
