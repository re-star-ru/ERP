// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/restaritem"
	"backend/pkg/photo"
	"backend/pkg/work"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RestaritemUpdate is the builder for updating Restaritem entities.
type RestaritemUpdate struct {
	config
	hooks    []Hook
	mutation *RestaritemMutation
}

// Where appends a list predicates to the RestaritemUpdate builder.
func (ru *RestaritemUpdate) Where(ps ...predicate.Restaritem) *RestaritemUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetOnecGUID sets the "onecGUID" field.
func (ru *RestaritemUpdate) SetOnecGUID(s string) *RestaritemUpdate {
	ru.mutation.SetOnecGUID(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RestaritemUpdate) SetName(s string) *RestaritemUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableName(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RestaritemUpdate) ClearName() *RestaritemUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetSku sets the "sku" field.
func (ru *RestaritemUpdate) SetSku(s string) *RestaritemUpdate {
	ru.mutation.SetSku(s)
	return ru
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableSku(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetSku(*s)
	}
	return ru
}

// ClearSku clears the value of the "sku" field.
func (ru *RestaritemUpdate) ClearSku() *RestaritemUpdate {
	ru.mutation.ClearSku()
	return ru
}

// SetItemGUID sets the "itemGUID" field.
func (ru *RestaritemUpdate) SetItemGUID(s string) *RestaritemUpdate {
	ru.mutation.SetItemGUID(s)
	return ru
}

// SetNillableItemGUID sets the "itemGUID" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableItemGUID(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetItemGUID(*s)
	}
	return ru
}

// ClearItemGUID clears the value of the "itemGUID" field.
func (ru *RestaritemUpdate) ClearItemGUID() *RestaritemUpdate {
	ru.mutation.ClearItemGUID()
	return ru
}

// SetCharGUID sets the "charGUID" field.
func (ru *RestaritemUpdate) SetCharGUID(s string) *RestaritemUpdate {
	ru.mutation.SetCharGUID(s)
	return ru
}

// SetNillableCharGUID sets the "charGUID" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableCharGUID(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetCharGUID(*s)
	}
	return ru
}

// ClearCharGUID clears the value of the "charGUID" field.
func (ru *RestaritemUpdate) ClearCharGUID() *RestaritemUpdate {
	ru.mutation.ClearCharGUID()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RestaritemUpdate) SetDescription(s string) *RestaritemUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableDescription(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RestaritemUpdate) ClearDescription() *RestaritemUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetInspector sets the "inspector" field.
func (ru *RestaritemUpdate) SetInspector(s string) *RestaritemUpdate {
	ru.mutation.SetInspector(s)
	return ru
}

// SetNillableInspector sets the "inspector" field if the given value is not nil.
func (ru *RestaritemUpdate) SetNillableInspector(s *string) *RestaritemUpdate {
	if s != nil {
		ru.SetInspector(*s)
	}
	return ru
}

// ClearInspector clears the value of the "inspector" field.
func (ru *RestaritemUpdate) ClearInspector() *RestaritemUpdate {
	ru.mutation.ClearInspector()
	return ru
}

// SetInspection sets the "inspection" field.
func (ru *RestaritemUpdate) SetInspection(s []string) *RestaritemUpdate {
	ru.mutation.SetInspection(s)
	return ru
}

// ClearInspection clears the value of the "inspection" field.
func (ru *RestaritemUpdate) ClearInspection() *RestaritemUpdate {
	ru.mutation.ClearInspection()
	return ru
}

// SetPhotos sets the "photos" field.
func (ru *RestaritemUpdate) SetPhotos(ph []photo.Photo) *RestaritemUpdate {
	ru.mutation.SetPhotos(ph)
	return ru
}

// ClearPhotos clears the value of the "photos" field.
func (ru *RestaritemUpdate) ClearPhotos() *RestaritemUpdate {
	ru.mutation.ClearPhotos()
	return ru
}

// SetWorks sets the "works" field.
func (ru *RestaritemUpdate) SetWorks(w []work.Work) *RestaritemUpdate {
	ru.mutation.SetWorks(w)
	return ru
}

// ClearWorks clears the value of the "works" field.
func (ru *RestaritemUpdate) ClearWorks() *RestaritemUpdate {
	ru.mutation.ClearWorks()
	return ru
}

// Mutation returns the RestaritemMutation object of the builder.
func (ru *RestaritemUpdate) Mutation() *RestaritemMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RestaritemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaritemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RestaritemUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RestaritemUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RestaritemUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RestaritemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaritem.Table,
			Columns: restaritem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaritem.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.OnecGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldOnecGUID,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldName,
		})
	}
	if ru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldName,
		})
	}
	if value, ok := ru.mutation.Sku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldSku,
		})
	}
	if ru.mutation.SkuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldSku,
		})
	}
	if value, ok := ru.mutation.ItemGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldItemGUID,
		})
	}
	if ru.mutation.ItemGUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldItemGUID,
		})
	}
	if value, ok := ru.mutation.CharGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldCharGUID,
		})
	}
	if ru.mutation.CharGUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldCharGUID,
		})
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldDescription,
		})
	}
	if ru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldDescription,
		})
	}
	if value, ok := ru.mutation.Inspector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldInspector,
		})
	}
	if ru.mutation.InspectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldInspector,
		})
	}
	if value, ok := ru.mutation.Inspection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldInspection,
		})
	}
	if ru.mutation.InspectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldInspection,
		})
	}
	if value, ok := ru.mutation.Photos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldPhotos,
		})
	}
	if ru.mutation.PhotosCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldPhotos,
		})
	}
	if value, ok := ru.mutation.Works(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldWorks,
		})
	}
	if ru.mutation.WorksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldWorks,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaritem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RestaritemUpdateOne is the builder for updating a single Restaritem entity.
type RestaritemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RestaritemMutation
}

// SetOnecGUID sets the "onecGUID" field.
func (ruo *RestaritemUpdateOne) SetOnecGUID(s string) *RestaritemUpdateOne {
	ruo.mutation.SetOnecGUID(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RestaritemUpdateOne) SetName(s string) *RestaritemUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableName(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RestaritemUpdateOne) ClearName() *RestaritemUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetSku sets the "sku" field.
func (ruo *RestaritemUpdateOne) SetSku(s string) *RestaritemUpdateOne {
	ruo.mutation.SetSku(s)
	return ruo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableSku(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetSku(*s)
	}
	return ruo
}

// ClearSku clears the value of the "sku" field.
func (ruo *RestaritemUpdateOne) ClearSku() *RestaritemUpdateOne {
	ruo.mutation.ClearSku()
	return ruo
}

// SetItemGUID sets the "itemGUID" field.
func (ruo *RestaritemUpdateOne) SetItemGUID(s string) *RestaritemUpdateOne {
	ruo.mutation.SetItemGUID(s)
	return ruo
}

// SetNillableItemGUID sets the "itemGUID" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableItemGUID(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetItemGUID(*s)
	}
	return ruo
}

// ClearItemGUID clears the value of the "itemGUID" field.
func (ruo *RestaritemUpdateOne) ClearItemGUID() *RestaritemUpdateOne {
	ruo.mutation.ClearItemGUID()
	return ruo
}

// SetCharGUID sets the "charGUID" field.
func (ruo *RestaritemUpdateOne) SetCharGUID(s string) *RestaritemUpdateOne {
	ruo.mutation.SetCharGUID(s)
	return ruo
}

// SetNillableCharGUID sets the "charGUID" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableCharGUID(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetCharGUID(*s)
	}
	return ruo
}

// ClearCharGUID clears the value of the "charGUID" field.
func (ruo *RestaritemUpdateOne) ClearCharGUID() *RestaritemUpdateOne {
	ruo.mutation.ClearCharGUID()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RestaritemUpdateOne) SetDescription(s string) *RestaritemUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableDescription(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RestaritemUpdateOne) ClearDescription() *RestaritemUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetInspector sets the "inspector" field.
func (ruo *RestaritemUpdateOne) SetInspector(s string) *RestaritemUpdateOne {
	ruo.mutation.SetInspector(s)
	return ruo
}

// SetNillableInspector sets the "inspector" field if the given value is not nil.
func (ruo *RestaritemUpdateOne) SetNillableInspector(s *string) *RestaritemUpdateOne {
	if s != nil {
		ruo.SetInspector(*s)
	}
	return ruo
}

// ClearInspector clears the value of the "inspector" field.
func (ruo *RestaritemUpdateOne) ClearInspector() *RestaritemUpdateOne {
	ruo.mutation.ClearInspector()
	return ruo
}

// SetInspection sets the "inspection" field.
func (ruo *RestaritemUpdateOne) SetInspection(s []string) *RestaritemUpdateOne {
	ruo.mutation.SetInspection(s)
	return ruo
}

// ClearInspection clears the value of the "inspection" field.
func (ruo *RestaritemUpdateOne) ClearInspection() *RestaritemUpdateOne {
	ruo.mutation.ClearInspection()
	return ruo
}

// SetPhotos sets the "photos" field.
func (ruo *RestaritemUpdateOne) SetPhotos(ph []photo.Photo) *RestaritemUpdateOne {
	ruo.mutation.SetPhotos(ph)
	return ruo
}

// ClearPhotos clears the value of the "photos" field.
func (ruo *RestaritemUpdateOne) ClearPhotos() *RestaritemUpdateOne {
	ruo.mutation.ClearPhotos()
	return ruo
}

// SetWorks sets the "works" field.
func (ruo *RestaritemUpdateOne) SetWorks(w []work.Work) *RestaritemUpdateOne {
	ruo.mutation.SetWorks(w)
	return ruo
}

// ClearWorks clears the value of the "works" field.
func (ruo *RestaritemUpdateOne) ClearWorks() *RestaritemUpdateOne {
	ruo.mutation.ClearWorks()
	return ruo
}

// Mutation returns the RestaritemMutation object of the builder.
func (ruo *RestaritemUpdateOne) Mutation() *RestaritemMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RestaritemUpdateOne) Select(field string, fields ...string) *RestaritemUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Restaritem entity.
func (ruo *RestaritemUpdateOne) Save(ctx context.Context) (*Restaritem, error) {
	var (
		err  error
		node *Restaritem
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaritemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RestaritemUpdateOne) SaveX(ctx context.Context) *Restaritem {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RestaritemUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RestaritemUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RestaritemUpdateOne) sqlSave(ctx context.Context) (_node *Restaritem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaritem.Table,
			Columns: restaritem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaritem.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Restaritem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, restaritem.FieldID)
		for _, f := range fields {
			if !restaritem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != restaritem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.OnecGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldOnecGUID,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldName,
		})
	}
	if ruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldName,
		})
	}
	if value, ok := ruo.mutation.Sku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldSku,
		})
	}
	if ruo.mutation.SkuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldSku,
		})
	}
	if value, ok := ruo.mutation.ItemGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldItemGUID,
		})
	}
	if ruo.mutation.ItemGUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldItemGUID,
		})
	}
	if value, ok := ruo.mutation.CharGUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldCharGUID,
		})
	}
	if ruo.mutation.CharGUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldCharGUID,
		})
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldDescription,
		})
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldDescription,
		})
	}
	if value, ok := ruo.mutation.Inspector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaritem.FieldInspector,
		})
	}
	if ruo.mutation.InspectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaritem.FieldInspector,
		})
	}
	if value, ok := ruo.mutation.Inspection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldInspection,
		})
	}
	if ruo.mutation.InspectionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldInspection,
		})
	}
	if value, ok := ruo.mutation.Photos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldPhotos,
		})
	}
	if ruo.mutation.PhotosCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldPhotos,
		})
	}
	if value, ok := ruo.mutation.Works(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: restaritem.FieldWorks,
		})
	}
	if ruo.mutation.WorksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: restaritem.FieldWorks,
		})
	}
	_node = &Restaritem{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaritem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
