// Code generated by entc, DO NOT EDIT.

package restaritem

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OnecGUID applies equality check predicate on the "onecGUID" field. It's identical to OnecGUIDEQ.
func OnecGUID(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnecGUID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// ItemGUID applies equality check predicate on the "itemGUID" field. It's identical to ItemGUIDEQ.
func ItemGUID(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemGUID), v))
	})
}

// CharGUID applies equality check predicate on the "charGUID" field. It's identical to CharGUIDEQ.
func CharGUID(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharGUID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Inspector applies equality check predicate on the "inspector" field. It's identical to InspectorEQ.
func Inspector(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInspector), v))
	})
}

// OnecGUIDEQ applies the EQ predicate on the "onecGUID" field.
func OnecGUIDEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDNEQ applies the NEQ predicate on the "onecGUID" field.
func OnecGUIDNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDIn applies the In predicate on the "onecGUID" field.
func OnecGUIDIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnecGUID), v...))
	})
}

// OnecGUIDNotIn applies the NotIn predicate on the "onecGUID" field.
func OnecGUIDNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnecGUID), v...))
	})
}

// OnecGUIDGT applies the GT predicate on the "onecGUID" field.
func OnecGUIDGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDGTE applies the GTE predicate on the "onecGUID" field.
func OnecGUIDGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDLT applies the LT predicate on the "onecGUID" field.
func OnecGUIDLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDLTE applies the LTE predicate on the "onecGUID" field.
func OnecGUIDLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDContains applies the Contains predicate on the "onecGUID" field.
func OnecGUIDContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDHasPrefix applies the HasPrefix predicate on the "onecGUID" field.
func OnecGUIDHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDHasSuffix applies the HasSuffix predicate on the "onecGUID" field.
func OnecGUIDHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDEqualFold applies the EqualFold predicate on the "onecGUID" field.
func OnecGUIDEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOnecGUID), v))
	})
}

// OnecGUIDContainsFold applies the ContainsFold predicate on the "onecGUID" field.
func OnecGUIDContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOnecGUID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSku), v))
	})
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSku), v...))
	})
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSku), v...))
	})
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSku), v))
	})
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSku), v))
	})
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSku), v))
	})
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSku), v))
	})
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSku), v))
	})
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSku), v))
	})
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSku), v))
	})
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSku), v))
	})
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSku), v))
	})
}

// ItemGUIDEQ applies the EQ predicate on the "itemGUID" field.
func ItemGUIDEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDNEQ applies the NEQ predicate on the "itemGUID" field.
func ItemGUIDNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDIn applies the In predicate on the "itemGUID" field.
func ItemGUIDIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItemGUID), v...))
	})
}

// ItemGUIDNotIn applies the NotIn predicate on the "itemGUID" field.
func ItemGUIDNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItemGUID), v...))
	})
}

// ItemGUIDGT applies the GT predicate on the "itemGUID" field.
func ItemGUIDGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDGTE applies the GTE predicate on the "itemGUID" field.
func ItemGUIDGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDLT applies the LT predicate on the "itemGUID" field.
func ItemGUIDLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDLTE applies the LTE predicate on the "itemGUID" field.
func ItemGUIDLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDContains applies the Contains predicate on the "itemGUID" field.
func ItemGUIDContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDHasPrefix applies the HasPrefix predicate on the "itemGUID" field.
func ItemGUIDHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDHasSuffix applies the HasSuffix predicate on the "itemGUID" field.
func ItemGUIDHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDEqualFold applies the EqualFold predicate on the "itemGUID" field.
func ItemGUIDEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDContainsFold applies the ContainsFold predicate on the "itemGUID" field.
func ItemGUIDContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemGUID), v))
	})
}

// CharGUIDEQ applies the EQ predicate on the "charGUID" field.
func CharGUIDEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharGUID), v))
	})
}

// CharGUIDNEQ applies the NEQ predicate on the "charGUID" field.
func CharGUIDNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCharGUID), v))
	})
}

// CharGUIDIn applies the In predicate on the "charGUID" field.
func CharGUIDIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCharGUID), v...))
	})
}

// CharGUIDNotIn applies the NotIn predicate on the "charGUID" field.
func CharGUIDNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCharGUID), v...))
	})
}

// CharGUIDGT applies the GT predicate on the "charGUID" field.
func CharGUIDGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCharGUID), v))
	})
}

// CharGUIDGTE applies the GTE predicate on the "charGUID" field.
func CharGUIDGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCharGUID), v))
	})
}

// CharGUIDLT applies the LT predicate on the "charGUID" field.
func CharGUIDLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCharGUID), v))
	})
}

// CharGUIDLTE applies the LTE predicate on the "charGUID" field.
func CharGUIDLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCharGUID), v))
	})
}

// CharGUIDContains applies the Contains predicate on the "charGUID" field.
func CharGUIDContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCharGUID), v))
	})
}

// CharGUIDHasPrefix applies the HasPrefix predicate on the "charGUID" field.
func CharGUIDHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCharGUID), v))
	})
}

// CharGUIDHasSuffix applies the HasSuffix predicate on the "charGUID" field.
func CharGUIDHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCharGUID), v))
	})
}

// CharGUIDEqualFold applies the EqualFold predicate on the "charGUID" field.
func CharGUIDEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCharGUID), v))
	})
}

// CharGUIDContainsFold applies the ContainsFold predicate on the "charGUID" field.
func CharGUIDContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCharGUID), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// InspectorEQ applies the EQ predicate on the "inspector" field.
func InspectorEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInspector), v))
	})
}

// InspectorNEQ applies the NEQ predicate on the "inspector" field.
func InspectorNEQ(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInspector), v))
	})
}

// InspectorIn applies the In predicate on the "inspector" field.
func InspectorIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInspector), v...))
	})
}

// InspectorNotIn applies the NotIn predicate on the "inspector" field.
func InspectorNotIn(vs ...string) predicate.Restaritem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaritem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInspector), v...))
	})
}

// InspectorGT applies the GT predicate on the "inspector" field.
func InspectorGT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInspector), v))
	})
}

// InspectorGTE applies the GTE predicate on the "inspector" field.
func InspectorGTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInspector), v))
	})
}

// InspectorLT applies the LT predicate on the "inspector" field.
func InspectorLT(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInspector), v))
	})
}

// InspectorLTE applies the LTE predicate on the "inspector" field.
func InspectorLTE(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInspector), v))
	})
}

// InspectorContains applies the Contains predicate on the "inspector" field.
func InspectorContains(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInspector), v))
	})
}

// InspectorHasPrefix applies the HasPrefix predicate on the "inspector" field.
func InspectorHasPrefix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInspector), v))
	})
}

// InspectorHasSuffix applies the HasSuffix predicate on the "inspector" field.
func InspectorHasSuffix(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInspector), v))
	})
}

// InspectorEqualFold applies the EqualFold predicate on the "inspector" field.
func InspectorEqualFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInspector), v))
	})
}

// InspectorContainsFold applies the ContainsFold predicate on the "inspector" field.
func InspectorContainsFold(v string) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInspector), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Restaritem) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Restaritem) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Restaritem) predicate.Restaritem {
	return predicate.Restaritem(func(s *sql.Selector) {
		p(s.Not())
	})
}
