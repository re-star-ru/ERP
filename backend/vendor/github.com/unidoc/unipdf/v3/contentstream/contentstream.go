//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_e "bufio";_eeb "bytes";_gd "encoding/hex";_c "errors";_ff "fmt";_fc "github.com/unidoc/unipdf/v3/common";_cdb "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/internal/imageutil";_ec "github.com/unidoc/unipdf/v3/internal/transform";
_fd "github.com/unidoc/unipdf/v3/model";_f "image/color";_cd "image/jpeg";_cc "io";_ee "math";_g "strconv";);

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ddc *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_cec :=ContentStreamOperation {};_cec .Operand ="\u006b";_cec .Params =_cdce ([]float64 {c ,m ,y ,k });_ddc ._ce =append (_ddc ._ce ,&_cec );return _ddc ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcaf *ContentCreator )Add_G (gray float64 )*ContentCreator {_ebg :=ContentStreamOperation {};_ebg .Operand ="\u0047";_ebg .Params =_cdce ([]float64 {gray });_fcaf ._ce =append (_fcaf ._ce ,&_ebg );return _fcaf ;};func (_dba *ContentStreamProcessor )handleCommand_g (_agag *ContentStreamOperation ,_efdc *_fd .PdfPageResources )error {_eggb :=_fd .NewPdfColorspaceDeviceGray ();
if len (_agag .Params )!=_eggb .GetNumComponents (){_fc .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agag .Params ),_eggb );
return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dced ,_acgc :=_eggb .ColorFromPdfObjects (_agag .Params );if _acgc !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_eggb ,_agag ,_acgc );
return _acgc ;};_dba ._dacfa .ColorspaceNonStroking =_eggb ;_dba ._dacfa .ColorNonStroking =_dced ;return nil ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_cggec :=ContentStreamProcessor {};_cggec ._caecd =GraphicStateStack {};_fdbf :=GraphicsState {};_cggec ._dacfa =_fdbf ;_cggec ._gdcf =[]handlerEntry {};_cggec ._adgc =0;
_cggec ._gfb =ops ;return &_cggec ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dde *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fde :=ContentStreamOperation {};_fde .Operand ="\u0076";_fde .Params =_cdce ([]float64 {x2 ,y2 ,x3 ,y3 });_dde ._ce =append (_dde ._ce ,&_fde );return _dde ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_bgd *_e .Reader };

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dg *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_dgg :=ContentStreamOperation {};_dgg .Operand ="\u0052\u0047";_dgg .Params =_cdce ([]float64 {r ,g ,b });_dg ._ce =append (_dg ._ce ,&_dgg );return _dg ;};var (ErrInvalidOperand =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
);func (_debf *ContentStreamInlineImage )String ()string {_gfdg :=_ff .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_debf ._dad ));if _debf .BitsPerComponent !=nil {_gfdg +="\u002d\u0020\u0042\u0050\u0043\u0020"+_debf .BitsPerComponent .WriteString ()+"\u000a";
};if _debf .ColorSpace !=nil {_gfdg +="\u002d\u0020\u0043S\u0020"+_debf .ColorSpace .WriteString ()+"\u000a";};if _debf .Decode !=nil {_gfdg +="\u002d\u0020\u0044\u0020"+_debf .Decode .WriteString ()+"\u000a";};if _debf .DecodeParms !=nil {_gfdg +="\u002d\u0020\u0044P\u0020"+_debf .DecodeParms .WriteString ()+"\u000a";
};if _debf .Filter !=nil {_gfdg +="\u002d\u0020\u0046\u0020"+_debf .Filter .WriteString ()+"\u000a";};if _debf .Height !=nil {_gfdg +="\u002d\u0020\u0048\u0020"+_debf .Height .WriteString ()+"\u000a";};if _debf .ImageMask !=nil {_gfdg +="\u002d\u0020\u0049M\u0020"+_debf .ImageMask .WriteString ()+"\u000a";
};if _debf .Intent !=nil {_gfdg +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_debf .Intent .WriteString ()+"\u000a";};if _debf .Interpolate !=nil {_gfdg +="\u002d\u0020\u0049\u0020"+_debf .Interpolate .WriteString ()+"\u000a";};if _debf .Width !=nil {_gfdg +="\u002d\u0020\u0057\u0020"+_debf .Width .WriteString ()+"\u000a";
};return _gfdg ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_beb *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_cff :=ContentStreamOperation {};_cff .Operand ="\u0073\u0063\u006e";_cff .Params =_cdce (c );_beb ._ce =append (_beb ._ce ,&_cff );return _beb ;};func (_cfgc *ContentStreamParser )skipComments ()error {if _ ,_cadf :=_cfgc .skipSpaces ();
_cadf !=nil {return _cadf ;};_eege :=true ;for {_ddae ,_gfcg :=_cfgc ._bgd .Peek (1);if _gfcg !=nil {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gfcg .Error ());return _gfcg ;};if _eege &&_ddae [0]!='%'{return nil ;};_eege =false ;
if (_ddae [0]!='\r')&&(_ddae [0]!='\n'){_cfgc ._bgd .ReadByte ();}else {break ;};};return _cfgc .skipComments ();};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fcg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_dd :=ContentStreamOperation {};_dd .Operand ="\u004d";_dd .Params =_cdce ([]float64 {miterlimit });_fcg ._ce =append (_fcg ._ce ,&_dd );return _fcg ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_df *ContentCreator )Add_b_starred ()*ContentCreator {_fbg :=ContentStreamOperation {};_fbg .Operand ="\u0062\u002a";_df ._ce =append (_df ._ce ,&_fbg );return _df ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dbea *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_egg :=ContentStreamOperation {};_egg .Operand ="\u004b";_egg .Params =_cdce ([]float64 {c ,m ,y ,k });_dbea ._ce =append (_dbea ._ce ,&_egg );return _dbea ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cag *ContentCreator )SetStrokingColor (color _fd .PdfColor )*ContentCreator {switch _egff :=color .(type ){case *_fd .PdfColorDeviceGray :_cag .Add_G (_egff .Val ());case *_fd .PdfColorDeviceRGB :_cag .Add_RG (_egff .R (),_egff .G (),_egff .B ());
case *_fd .PdfColorDeviceCMYK :_cag .Add_K (_egff .C (),_egff .M (),_egff .Y (),_egff .K ());default:_fc .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_egff );
};return _cag ;};func (_gbc *ContentStreamProcessor )handleCommand_cs (_aae *ContentStreamOperation ,_eaa *_fd .PdfPageResources )error {if len (_aae .Params )< 1{_fc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_aae .Params )> 1{_fc .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_agceg ,_efg :=_aae .Params [0].(*_cdb .PdfObjectName );if !_efg {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_faef ,_gcec :=_gbc .getColorspace (string (*_agceg ),_eaa );if _gcec !=nil {return _gcec ;};_gbc ._dacfa .ColorspaceNonStroking =_faef ;_gfgf ,_gcec :=_gbc .getInitialColor (_faef );
if _gcec !=nil {return _gcec ;};_gbc ._dacfa .ColorNonStroking =_gfgf ;return nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dac *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_dbgf :=ContentStreamOperation {};_dbgf .Operand ="\u0054\u0044";_dbgf .Params =_cdce ([]float64 {tx ,ty });_dac ._ce =append (_dac ._ce ,&_dbgf );return _dac ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bcg *ContentCreator )Add_h ()*ContentCreator {_aba :=ContentStreamOperation {};_aba .Operand ="\u0068";_bcg ._ce =append (_bcg ._ce ,&_aba );return _bcg ;};func _fedf (_cdbd _cdb .PdfObject )(_fd .PdfColorspace ,error ){_cbec ,_adgb :=_cdbd .(*_cdb .PdfObjectArray );
if !_adgb {_fc .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_cdbd );
return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _cbec .Len ()!=4{_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_cbec .Len ());
return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bfee ,_adgb :=_cbec .Get (0).(*_cdb .PdfObjectName );if !_adgb {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_cbec );
return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_bfee !="\u0049"&&*_bfee !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_fc .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_bfee );
return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bfee ,_adgb =_cbec .Get (1).(*_cdb .PdfObjectName );if !_adgb {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_cbec );
return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_bfee !="\u0047"&&*_bfee !="\u0052\u0047\u0042"&&*_bfee !="\u0043\u004d\u0059\u004b"&&*_bfee !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_bfee !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_bfee !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_bfee );
return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bbaf :="";switch *_bfee {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bbaf ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bbaf ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_bbaf ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_bbcd :=_cdb .MakeArray (_cdb .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_cdb .MakeName (_bbaf ),_cbec .Get (2),_cbec .Get (3));return _fd .NewPdfColorspaceFromPdfObject (_bbcd );};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_bca *ContentCreator )Add_ET ()*ContentCreator {_gacg :=ContentStreamOperation {};_gacg .Operand ="\u0045\u0054";_bca ._ce =append (_bca ._ce ,&_gacg );return _bca ;};

// Scale applies x-y scaling to the transformation matrix.
func (_fcb *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fcb .Add_cm (sx ,0,0,sy ,0,0);};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aga *ContentCreator )Add_s ()*ContentCreator {_afa :=ContentStreamOperation {};_afa .Operand ="\u0073";_aga ._ce =append (_aga ._ce ,&_afa );return _aga ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_abb *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cegd :=ContentStreamOperation {};_cegd .Operand ="\u0063";_cegd .Params =_cdce ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_abb ._ce =append (_abb ._ce ,&_cegd );return _abb ;
};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdb *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_fbfa :=ContentStreamOperation {};_fbfa .Operand ="\u0077";_fbfa .Params =_cdce ([]float64 {lineWidth });_gdb ._ce =append (_gdb ._ce ,&_fbfa );return _gdb ;};func _fbac (_afe *ContentStreamInlineImage )(_cdb .StreamEncoder ,error ){if _afe .Filter ==nil {return _cdb .NewRawEncoder (),nil ;
};_gag ,_dedf :=_afe .Filter .(*_cdb .PdfObjectName );if !_dedf {_feg ,_ccbc :=_afe .Filter .(*_cdb .PdfObjectArray );if !_ccbc {return nil ,_ff .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _feg .Len ()==0{return _cdb .NewRawEncoder (),nil ;};if _feg .Len ()!=1{_abf ,_fbff :=_gggc (_afe );if _fbff !=nil {_fc .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_fbff );
return nil ,_fbff ;};_fc .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_abf );return _abf ,nil ;};_gddf :=_feg .Get (0);_gag ,_ccbc =_gddf .(*_cdb .PdfObjectName );if !_ccbc {return nil ,_ff .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_gag {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _cdb .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _cdb .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _aca (_afe );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _cbc (_afe ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _dfff (_afe ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _cdb .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _cdb .NewRunLengthEncoder (),nil ;
default:_fc .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_gag );
return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_ged *ContentStreamInlineImage )ToImage (resources *_fd .PdfPageResources )(*_fd .Image ,error ){_gagc ,_deg :=_ged .toImageBase (resources );if _deg !=nil {return nil ,_deg ;};_dcgc ,_deg :=_fbac (_ged );if _deg !=nil {return nil ,_deg ;};_gcb ,_gefc :=_cdb .GetDict (_ged .DecodeParms );
if _gefc {_dcgc .UpdateParams (_gcb );};_fc .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_dcgc ,_dcgc );_fc .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_ged );
_geef ,_deg :=_dcgc .DecodeBytes (_ged ._dad );if _deg !=nil {return nil ,_deg ;};_edg :=&_fd .Image {Width :int64 (_gagc .Width ),Height :int64 (_gagc .Height ),BitsPerComponent :int64 (_gagc .BitsPerComponent ),ColorComponents :_gagc .ColorComponents ,Data :_geef };
if len (_gagc .Decode )> 0{for _ecafc :=0;_ecafc < len (_gagc .Decode );_ecafc ++{_gagc .Decode [_ecafc ]*=float64 ((int (1)<<uint (_gagc .BitsPerComponent ))-1);};_edg .SetDecode (_gagc .Decode );};return _edg ,nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dab *ContentCreator )Add_Tj (textstr _cdb .PdfObjectString )*ContentCreator {_agba :=ContentStreamOperation {};_agba .Operand ="\u0054\u006a";_agba .Params =_ffea ([]_cdb .PdfObjectString {textstr });_dab ._ce =append (_dab ._ce ,&_agba );return _dab ;
};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _cdb .PdfObject ;ColorSpace _cdb .PdfObject ;Decode _cdb .PdfObject ;DecodeParms _cdb .PdfObject ;Filter _cdb .PdfObject ;Height _cdb .PdfObject ;ImageMask _cdb .PdfObject ;Intent _cdb .PdfObject ;Interpolate _cdb .PdfObject ;
Width _cdb .PdfObject ;_dad []byte ;_abcf *_a .ImageBase ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _fd .Image ,encoder _cdb .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_cdb .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_deda :=ContentStreamInlineImage {};if img .ColorComponents ==1{_deda .ColorSpace =_cdb .MakeName ("\u0047");
}else if img .ColorComponents ==3{_deda .ColorSpace =_cdb .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_deda .ColorSpace =_cdb .MakeName ("\u0043\u004d\u0059\u004b");}else {_fc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_deda .BitsPerComponent =_cdb .MakeInteger (img .BitsPerComponent );
_deda .Width =_cdb .MakeInteger (img .Width );_deda .Height =_cdb .MakeInteger (img .Height );_cadg ,_afg :=encoder .EncodeBytes (img .Data );if _afg !=nil {return nil ,_afg ;};_deda ._dad =_cadg ;_eed :=encoder .GetFilterName ();if _eed !=_cdb .StreamEncodingFilterNameRaw {_deda .Filter =_cdb .MakeName (_eed );
};return &_deda ,nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ca *ContentCreator )Wrap (){_ca ._ce .WrapIfNeeded ()};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func (_cgde *ContentStreamProcessor )handleCommand_cm (_gdef *ContentStreamOperation ,_edee *_fd .PdfPageResources )error {if len (_gdef .Params )!=6{_fc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_gdef .Params ));
return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eegb ,_aefc :=_cdb .GetNumbersAsFloat (_gdef .Params );if _aefc !=nil {return _aefc ;
};_geg :=_ec .NewMatrix (_eegb [0],_eegb [1],_eegb [2],_eegb [3],_eegb [4],_eegb [5]);_cgde ._dacfa .CTM .Concat (_geg );return nil ;};

// String is same as Bytes() except returns as a string for convenience.
func (_bc *ContentCreator )String ()string {return string (_bc ._ce .Bytes ())};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_agb *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_ecca :=ContentStreamOperation {};_ecca .Operand ="\u0072\u0067";_ecca .Params =_cdce ([]float64 {r ,g ,b });_agb ._ce =append (_agb ._ce ,&_ecca );return _agb ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_eea *ContentCreator )Add_sh (name _cdb .PdfObjectName )*ContentCreator {_gaa :=ContentStreamOperation {};_gaa .Operand ="\u0073\u0068";_gaa .Params =_gfa ([]_cdb .PdfObjectName {name });_eea ._ce =append (_eea ._ce ,&_gaa );return _eea ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcd *ContentCreator )Add_cs (name _cdb .PdfObjectName )*ContentCreator {_add :=ContentStreamOperation {};_add .Operand ="\u0063\u0073";_add .Params =_gfa ([]_cdb .PdfObjectName {name });_fcd ._ce =append (_fcd ._ce ,&_add );return _fcd ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_abe *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_abe )==0{return _abe ;};if _abe .isWrapped (){return _abe ;};*_abe =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_abe ...);_gb :=0;for _ ,_fb :=range *_abe {if _fb .Operand =="\u0071"{_gb ++;
}else if _fb .Operand =="\u0051"{_gb --;};};for _gb > 0{*_abe =append (*_abe ,&ContentStreamOperation {Operand :"\u0051"});_gb --;};return _abe ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdd *ContentCreator )Add_ri (intent _cdb .PdfObjectName )*ContentCreator {_ddb :=ContentStreamOperation {};_ddb .Operand ="\u0072\u0069";_ddb .Params =_gfa ([]_cdb .PdfObjectName {intent });_gdd ._ce =append (_gdd ._ce ,&_ddb );return _gdd ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abge *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0053\u0043";_cfa .Params =_cdce (c );_abge ._ce =append (_abge ._ce ,&_cfa );return _abge ;};func _ddcea (_dcb []int64 )[]_cdb .PdfObject {var _faecc []_cdb .PdfObject ;
for _ ,_acgb :=range _dcb {_faecc =append (_faecc ,_cdb .MakeInteger (_acgb ));};return _faecc ;};func (_acea *ContentStreamParser )parseHexString ()(*_cdb .PdfObjectString ,error ){_acea ._bgd .ReadByte ();_cea :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
var _cac []byte ;for {_acea .skipSpaces ();_abd ,_fad :=_acea ._bgd .Peek (1);if _fad !=nil {return _cdb .MakeString (""),_fad ;};if _abd [0]=='>'{_acea ._bgd .ReadByte ();break ;};_acfb ,_ :=_acea ._bgd .ReadByte ();if _eeb .IndexByte (_cea ,_acfb )>=0{_cac =append (_cac ,_acfb );
};};if len (_cac )%2==1{_cac =append (_cac ,'0');};_fae ,_ :=_gd .DecodeString (string (_cac ));return _cdb .MakeHexString (string (_fae )),nil ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_bcc *ContentCreator )Add_Do (name _cdb .PdfObjectName )*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u0044\u006f";_bf .Params =_gfa ([]_cdb .PdfObjectName {name });_bcc ._ce =append (_bcc ._ce ,&_bf );return _bcc ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gad *ContentCreator )Add_scn_pattern (name _cdb .PdfObjectName ,c ...float64 )*ContentCreator {_bec :=ContentStreamOperation {};_bec .Operand ="\u0073\u0063\u006e";_bec .Params =_cdce (c );_bec .Params =append (_bec .Params ,_cdb .MakeName (string (name )));
_gad ._ce =append (_gad ._ce ,&_bec );return _gad ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcc *ContentCreator )Add_SCN_pattern (name _cdb .PdfObjectName ,c ...float64 )*ContentCreator {_dce :=ContentStreamOperation {};_dce .Operand ="\u0053\u0043\u004e";_dce .Params =_cdce (c );_dce .Params =append (_dce .Params ,_cdb .MakeName (string (name )));
_fcc ._ce =append (_fcc ._ce ,&_dce );return _fcc ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_ae :=&ContentCreator {};_ae ._ce =ContentStreamOperations {};return _ae ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aad *ContentCreator )Add_TL (leading float64 )*ContentCreator {_bgf :=ContentStreamOperation {};_bgf .Operand ="\u0054\u004c";_bgf .Params =_cdce ([]float64 {leading });_aad ._ce =append (_aad ._ce ,&_bgf );return _aad ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_dgd *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_dcgd :=ContentStreamInlineImage {};for {_dgd .skipSpaces ();_gabd ,_cde ,_cga :=_dgd .parseObject ();if _cga !=nil {return nil ,_cga ;};if !_cde {_cfac ,_ccd :=_cdb .GetName (_gabd );
if !_ccd {_fc .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gabd );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gabd );
};_dacg ,_aab ,_ceed :=_dgd .parseObject ();if _ceed !=nil {return nil ,_ceed ;};if _aab {return nil ,_ff .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_cfac {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_dcgd .BitsPerComponent =_dacg ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_dcgd .ColorSpace =_dacg ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_dcgd .Decode =_dacg ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_dcgd .DecodeParms =_dacg ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_dcgd .Filter =_dacg ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_dcgd .Height =_dacg ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_dcgd .ImageMask =_dacg ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_dcgd .Intent =_dacg ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_dcgd .Interpolate =_dacg ;
case "\u0057","\u0057\u0069\u0064t\u0068":_dcgd .Width =_dacg ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_fc .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_cfac );
default:return nil ,_ff .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_cfac );};};if _cde {_febe ,_eabf :=_gabd .(*_cdb .PdfObjectString );
if !_eabf {return nil ,_ff .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _febe .Str ()=="\u0045\u0049"{_fc .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_dcgd ,nil ;}else if _febe .Str ()=="\u0049\u0044"{_fc .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_ddcb ,_febg :=_dgd ._bgd .Peek (1);if _febg !=nil {return nil ,_febg ;};if _cdb .IsWhiteSpace (_ddcb [0]){_dgd ._bgd .Discard (1);};_dcgd ._dad =[]byte {};_bgc :=0;var _gda []byte ;for {_gcd ,_ceee :=_dgd ._bgd .ReadByte ();if _ceee !=nil {_fc .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_ceee ;};if _bgc ==0{if _cdb .IsWhiteSpace (_gcd ){_gda =[]byte {};_gda =append (_gda ,_gcd );_bgc =1;}else if _gcd =='E'{_gda =append (_gda ,_gcd );_bgc =2;}else {_dcgd ._dad =append (_dcgd ._dad ,_gcd );};}else if _bgc ==1{_gda =append (_gda ,_gcd );
if _gcd =='E'{_bgc =2;}else {_dcgd ._dad =append (_dcgd ._dad ,_gda ...);_gda =[]byte {};if _cdb .IsWhiteSpace (_gcd ){_bgc =1;}else {_bgc =0;};};}else if _bgc ==2{_gda =append (_gda ,_gcd );if _gcd =='I'{_bgc =3;}else {_dcgd ._dad =append (_dcgd ._dad ,_gda ...);
_gda =[]byte {};_bgc =0;};}else if _bgc ==3{_gda =append (_gda ,_gcd );if _cdb .IsWhiteSpace (_gcd ){_becb ,_ccef :=_dgd ._bgd .Peek (20);if _ccef !=nil &&_ccef !=_cc .EOF {return nil ,_ccef ;};_cgfg :=NewContentStreamParser (string (_becb ));_cab :=true ;
for _dbgfb :=0;_dbgfb < 3;_dbgfb ++{_dda ,_eba ,_caa :=_cgfg .parseObject ();if _caa !=nil {if _caa ==_cc .EOF {break ;};_cab =false ;continue ;};if _eba &&!_egd (_dda .String ()){_cab =false ;break ;};};if _cab {if len (_dcgd ._dad )> 100{_fc .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_dcgd ._dad ),_dcgd ._dad [:100]);
}else {_fc .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_dcgd ._dad ),_dcgd ._dad );};return &_dcgd ,nil ;};};_dcgd ._dad =append (_dcgd ._dad ,_gda ...);_gda =[]byte {};
_bgc =0;};};};};};};func (_ab *ContentStreamOperations )isWrapped ()bool {if len (*_ab )< 2{return false ;};_ea :=0;for _ ,_b :=range *_ab {if _b .Operand =="\u0071"{_ea ++;}else if _b .Operand =="\u0051"{_ea --;}else {if _ea < 1{return false ;};};};return _ea ==0;
};

// Parse parses all commands in content stream, returning a list of operation data.
func (_agce *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_gefgd :=ContentStreamOperations {};for {_eeae :=ContentStreamOperation {};for {_agg ,_abfc ,_bcea :=_agce .parseObject ();if _bcea !=nil {if _bcea ==_cc .EOF {return &_gefgd ,nil ;
};return &_gefgd ,_bcea ;};if _abfc {_eeae .Operand ,_ =_cdb .GetStringVal (_agg );_gefgd =append (_gefgd ,&_eeae );break ;}else {_eeae .Params =append (_eeae .Params ,_agg );};};if _eeae .Operand =="\u0042\u0049"{_dafd ,_dcf :=_agce .ParseInlineImage ();
if _dcf !=nil {return &_gefgd ,_dcf ;};_eeae .Params =append (_eeae .Params ,_dafd );};};};func (_aef *ContentStreamProcessor )getInitialColor (_ebda _fd .PdfColorspace )(_fd .PdfColor ,error ){switch _geb :=_ebda .(type ){case *_fd .PdfColorspaceDeviceGray :return _fd .NewPdfColorDeviceGray (0.0),nil ;
case *_fd .PdfColorspaceDeviceRGB :return _fd .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_fd .PdfColorspaceDeviceCMYK :return _fd .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_fd .PdfColorspaceCalGray :return _fd .NewPdfColorCalGray (0.0),nil ;
case *_fd .PdfColorspaceCalRGB :return _fd .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_fd .PdfColorspaceLab :_edd :=0.0;_bgeg :=0.0;_gebb :=0.0;if _geb .Range [0]> 0{_edd =_geb .Range [0];};if _geb .Range [2]> 0{_bgeg =_geb .Range [2];};return _fd .NewPdfColorLab (_edd ,_bgeg ,_gebb ),nil ;
case *_fd .PdfColorspaceICCBased :if _geb .Alternate ==nil {_fc .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_geb .N );
if _geb .N ==1{_fc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aef .getInitialColor (_fd .NewPdfColorspaceDeviceGray ());}else if _geb .N ==3{_fc .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _aef .getInitialColor (_fd .NewPdfColorspaceDeviceRGB ());}else if _geb .N ==4{_fc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _aef .getInitialColor (_fd .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_c .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _aef .getInitialColor (_geb .Alternate );case *_fd .PdfColorspaceSpecialIndexed :if _geb .Base ==nil {return nil ,_c .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _aef .getInitialColor (_geb .Base );case *_fd .PdfColorspaceSpecialSeparation :if _geb .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aef .getInitialColor (_geb .AlternateSpace );case *_fd .PdfColorspaceDeviceN :if _geb .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aef .getInitialColor (_geb .AlternateSpace );case *_fd .PdfColorspaceSpecialPattern :return nil ,nil ;};_fc .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_ebda );
return nil ,_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gee *ContentCreator )Add_gs (dictName _cdb .PdfObjectName )*ContentCreator {_cf :=ContentStreamOperation {};_cf .Operand ="\u0067\u0073";_cf .Params =_gfa ([]_cdb .PdfObjectName {dictName });_gee ._ce =append (_gee ._ce ,&_cf );return _gee ;};func (_dcfbf *ContentStreamProcessor )handleCommand_G (_edgb *ContentStreamOperation ,_dadf *_fd .PdfPageResources )error {_gebd :=_fd .NewPdfColorspaceDeviceGray ();
if len (_edgb .Params )!=_gebd .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_edgb .Params ),_gebd );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_addg ,_gadf :=_gebd .ColorFromPdfObjects (_edgb .Params );if _gadf !=nil {return _gadf ;};_dcfbf ._dacfa .ColorspaceStroking =_gebd ;_dcfbf ._dacfa .ColorStroking =_addg ;return nil ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cad *ContentCreator )Add_BMC (tag _cdb .PdfObjectName )*ContentCreator {_eee :=ContentStreamOperation {};_eee .Operand ="\u0042\u004d\u0043";_eee .Params =_gfa ([]_cdb .PdfObjectName {tag });_cad ._ce =append (_cad ._ce ,&_eee );return _cad ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eaf *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_dbef :=ContentStreamOperation {};_dbef .Operand ="\u0054\u0077";_dbef .Params =_cdce ([]float64 {wordSpace });_eaf ._ce =append (_eaf ._ce ,&_dbef );return _eaf ;};func (_abca *ContentStreamParser )parseOperand ()(*_cdb .PdfObjectString ,error ){var _gde []byte ;
for {_bdd ,_efe :=_abca ._bgd .Peek (1);if _efe !=nil {return _cdb .MakeString (string (_gde )),_efe ;};if _cdb .IsDelimiter (_bdd [0]){break ;};if _cdb .IsWhiteSpace (_bdd [0]){break ;};_gaaa ,_ :=_abca ._bgd .ReadByte ();_gde =append (_gde ,_gaaa );};
return _cdb .MakeString (string (_gde )),nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_cdg *ContentCreator )Add_W ()*ContentCreator {_deb :=ContentStreamOperation {};_deb .Operand ="\u0057";_cdg ._ce =append (_cdg ._ce ,&_deb );return _cdg ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_ffbg HandlerConditionEnum )Operand ()bool {return _ffbg ==HandlerConditionEnumOperand };func (_gdag *ContentStreamProcessor )getColorspace (_ede string ,_ffe *_fd .PdfPageResources )(_fd .PdfColorspace ,error ){switch _ede {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _fd .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _fd .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _fd .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _fd .NewPdfColorspaceSpecialPattern (),nil ;
};_gcgb ,_gff :=_ffe .GetColorspaceByName (_cdb .PdfObjectName (_ede ));if _gff {return _gcgb ,nil ;};switch _ede {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _fd .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _fd .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _fd .NewPdfColorspaceLab (),nil ;};_fc .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_ede );
return nil ,_ff .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_ede );};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gbb *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ggg :=ContentStreamOperation {};_ggg .Operand ="\u0069";_ggg .Params =_cdce ([]float64 {flatness });_gbb ._ce =append (_gbb ._ce ,&_ggg );return _gbb ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_geed *GraphicStateStack )Pop ()GraphicsState {_cbcb :=(*_geed )[len (*_geed )-1];*_geed =(*_geed )[:len (*_geed )-1];return _cbcb ;};func (_dada *ContentStreamProcessor )handleCommand_scn (_aefb *ContentStreamOperation ,_gaad *_fd .PdfPageResources )error {_ecdd :=_dada ._dacfa .ColorspaceNonStroking ;
if !_bbb (_ecdd ){if len (_aefb .Params )!=_ecdd .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aefb .Params ),_ecdd );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_ceea ,_ggad :=_ecdd .ColorFromPdfObjects (_aefb .Params );if _ggad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_aefb .Params ,_ecdd );
return _ggad ;};_dada ._dacfa .ColorNonStroking =_ceea ;return nil ;};func (_afff *ContentStreamProcessor )handleCommand_SC (_cbb *ContentStreamOperation ,_cbde *_fd .PdfPageResources )error {_gdaa :=_afff ._dacfa .ColorspaceStroking ;if len (_cbb .Params )!=_gdaa .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbb .Params ),_gdaa );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_acdd ,_aded :=_gdaa .ColorFromPdfObjects (_cbb .Params );if _aded !=nil {return _aded ;};_afff ._dacfa .ColorStroking =_acdd ;return nil ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_acd *ContentCreator )Add_S ()*ContentCreator {_bdg :=ContentStreamOperation {};_bdg .Operand ="\u0053";_acd ._ce =append (_acd ._ce ,&_bdg );return _acd ;};func (_fce *ContentStreamParser )parseName ()(_cdb .PdfObjectName ,error ){_gce :="";_cece :=false ;
for {_cgfd ,_bbf :=_fce ._bgd .Peek (1);if _bbf ==_cc .EOF {break ;};if _bbf !=nil {return _cdb .PdfObjectName (_gce ),_bbf ;};if !_cece {if _cgfd [0]=='/'{_cece =true ;_fce ._bgd .ReadByte ();}else {_fc .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_cgfd ,_cgfd );
return _cdb .PdfObjectName (_gce ),_ff .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cgfd [0]);};}else {if _cdb .IsWhiteSpace (_cgfd [0]){break ;}else if (_cgfd [0]=='/')||(_cgfd [0]=='[')||(_cgfd [0]=='(')||(_cgfd [0]==']')||(_cgfd [0]=='<')||(_cgfd [0]=='>'){break ;
}else if _cgfd [0]=='#'{_fgd ,_adcg :=_fce ._bgd .Peek (3);if _adcg !=nil {return _cdb .PdfObjectName (_gce ),_adcg ;};_fce ._bgd .Discard (3);_gfcgf ,_adcg :=_gd .DecodeString (string (_fgd [1:3]));if _adcg !=nil {return _cdb .PdfObjectName (_gce ),_adcg ;
};_gce +=string (_gfcgf );}else {_afgb ,_ :=_fce ._bgd .ReadByte ();_gce +=string (_afgb );};};};return _cdb .PdfObjectName (_gce ),nil ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_fbf *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _fbf .Add_cm (1,0,0,1,tx ,ty );};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_def *ContentCreator )Add_CS (name _cdb .PdfObjectName )*ContentCreator {_fgc :=ContentStreamOperation {};_fgc .Operand ="\u0043\u0053";_fgc .Params =_gfa ([]_cdb .PdfObjectName {name });_def ._ce =append (_def ._ce ,&_fgc );return _def ;};func _aca (_eeab *ContentStreamInlineImage )(*_cdb .DCTEncoder ,error ){_gfd :=_cdb .NewDCTEncoder ();
_bee :=_eeb .NewReader (_eeab ._dad );_afaf ,_bfd :=_cd .DecodeConfig (_bee );if _bfd !=nil {_fc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_bfd );return nil ,_bfd ;
};switch _afaf .ColorModel {case _f .RGBAModel :_gfd .BitsPerComponent =8;_gfd .ColorComponents =3;case _f .RGBA64Model :_gfd .BitsPerComponent =16;_gfd .ColorComponents =3;case _f .GrayModel :_gfd .BitsPerComponent =8;_gfd .ColorComponents =1;case _f .Gray16Model :_gfd .BitsPerComponent =16;
_gfd .ColorComponents =1;case _f .CMYKModel :_gfd .BitsPerComponent =8;_gfd .ColorComponents =4;case _f .YCbCrModel :_gfd .BitsPerComponent =8;_gfd .ColorComponents =3;default:return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_gfd .Width =_afaf .Width ;_gfd .Height =_afaf .Height ;_fc .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_gfd );return _gfd ,nil ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dc *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u006a";_ecd .Params =_gfa ([]_cdb .PdfObjectName {_cdb .PdfObjectName (lineJoinStyle )});_dc ._ce =append (_dc ._ce ,&_ecd );return _dc ;
};

// GetEncoder returns the encoder of the inline image.
func (_acca *ContentStreamInlineImage )GetEncoder ()(_cdb .StreamEncoder ,error ){return _fbac (_acca )};func (_cgd *ContentStreamProcessor )handleCommand_RG (_acbe *ContentStreamOperation ,_fadf *_fd .PdfPageResources )error {_gdab :=_fd .NewPdfColorspaceDeviceRGB ();
if len (_acbe .Params )!=_gdab .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_acbe .Params ),_gdab );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_ddcc ,_eef :=_gdab .ColorFromPdfObjects (_acbe .Params );if _eef !=nil {return _eef ;};_cgd ._dacfa .ColorspaceStroking =_gdab ;_cgd ._dacfa .ColorStroking =_ddcc ;return nil ;};func _ffea (_cecc []_cdb .PdfObjectString )[]_cdb .PdfObject {var _bdc []_cdb .PdfObject ;
for _ ,_bbbg :=range _cecc {_bdc =append (_bdc ,_cdb .MakeString (_bbbg .Str ()));};return _bdc ;};func _gggc (_eagd *ContentStreamInlineImage )(*_cdb .MultiEncoder ,error ){_bbab :=_cdb .NewMultiEncoder ();var _acg *_cdb .PdfObjectDictionary ;var _afcc []_cdb .PdfObject ;
if _adc :=_eagd .DecodeParms ;_adc !=nil {_aadd ,_cagg :=_adc .(*_cdb .PdfObjectDictionary );if _cagg {_acg =_aadd ;};_ddf ,_bbc :=_adc .(*_cdb .PdfObjectArray );if _bbc {for _ ,_gcg :=range _ddf .Elements (){if _dbf ,_ecdb :=_gcg .(*_cdb .PdfObjectDictionary );
_ecdb {_afcc =append (_afcc ,_dbf );}else {_afcc =append (_afcc ,nil );};};};};_dfffe :=_eagd .Filter ;if _dfffe ==nil {return nil ,_ff .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_dec ,_dga :=_dfffe .(*_cdb .PdfObjectArray );
if !_dga {return nil ,_ff .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _dbb ,_bfa :=range _dec .Elements (){_dede ,_bebe :=_bfa .(*_cdb .PdfObjectName );
if !_bebe {return nil ,_ff .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _cega _cdb .PdfObject ;
if _acg !=nil {_cega =_acg ;}else {if len (_afcc )> 0{if _dbb >=len (_afcc ){return nil ,_ff .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_cega =_afcc [_dbb ];};};var _aada *_cdb .PdfObjectDictionary ;if _ggfa ,_adb :=_cega .(*_cdb .PdfObjectDictionary );_adb {_aada =_ggfa ;};if *_dede ==_cdb .StreamEncodingFilterNameFlate ||*_dede =="\u0046\u006c"{_fcbb ,_abaa :=_cbc (_eagd ,_aada );if _abaa !=nil {return nil ,_abaa ;
};_bbab .AddEncoder (_fcbb );}else if *_dede ==_cdb .StreamEncodingFilterNameLZW {_gdbg ,_eff :=_dfff (_eagd ,_aada );if _eff !=nil {return nil ,_eff ;};_bbab .AddEncoder (_gdbg );}else if *_dede ==_cdb .StreamEncodingFilterNameASCIIHex {_bfaa :=_cdb .NewASCIIHexEncoder ();
_bbab .AddEncoder (_bfaa );}else if *_dede ==_cdb .StreamEncodingFilterNameASCII85 ||*_dede =="\u0041\u0038\u0035"{_ggc :=_cdb .NewASCII85Encoder ();_bbab .AddEncoder (_ggc );}else {_fc .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_dede );
return nil ,_ff .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _bbab ,nil ;};func (_gefdc *ContentStreamParser )parseNumber ()(_cdb .PdfObject ,error ){return _cdb .ParseNumber (_gefdc ._bgd );
};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_abgf *ContentCreator )Add_Tr (render int64 )*ContentCreator {_gef :=ContentStreamOperation {};_gef .Operand ="\u0054\u0072";_gef .Params =_ddcea ([]int64 {render });_abgf ._ce =append (_abgf ._ce ,&_gef );return _abgf ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aaf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_fdea :=ContentStreamOperation {};_fdea .Operand ="\u0053\u0043\u004e";_fdea .Params =_cdce (c );_aaf ._ce =append (_aaf ._ce ,&_fdea );return _aaf ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};

// GetColorSpace returns the colorspace of the inline image.
func (_adf *ContentStreamInlineImage )GetColorSpace (resources *_fd .PdfPageResources )(_fd .PdfColorspace ,error ){if _adf .ColorSpace ==nil {_fc .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _fd .NewPdfColorspaceDeviceGray (),nil ;};if _becd ,_dgaa :=_adf .ColorSpace .(*_cdb .PdfObjectArray );_dgaa {return _fedf (_becd );};_agf ,_dca :=_adf .ColorSpace .(*_cdb .PdfObjectName );if !_dca {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_adf .ColorSpace ,_adf .ColorSpace );
return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_agf =="\u0047"||*_agf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _fd .NewPdfColorspaceDeviceGray (),nil ;
}else if *_agf =="\u0052\u0047\u0042"||*_agf =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _fd .NewPdfColorspaceDeviceRGB (),nil ;}else if *_agf =="\u0043\u004d\u0059\u004b"||*_agf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _fd .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_agf =="\u0049"||*_agf =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_c .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_fc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_agf );
return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_gaee ,_dbeb :=resources .GetColorspaceByName (*_agf );if !_dbeb {_fc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_agf );
return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _gaee ,nil ;};};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cbg *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0064";_eb .Params =[]_cdb .PdfObject {};_eb .Params =append (_eb .Params ,_cdb .MakeArrayFromIntegers64 (dashArray ));
_eb .Params =append (_eb .Params ,_cdb .MakeInteger (dashPhase ));_cbg ._ce =append (_cbg ._ce ,&_eb );return _cbg ;};func (_efa *ContentStreamParser )parseString ()(*_cdb .PdfObjectString ,error ){_efa ._bgd .ReadByte ();var _gabc []byte ;_fffb :=1;for {_befe ,_afge :=_efa ._bgd .Peek (1);
if _afge !=nil {return _cdb .MakeString (string (_gabc )),_afge ;};if _befe [0]=='\\'{_efa ._bgd .ReadByte ();_afccg ,_bbe :=_efa ._bgd .ReadByte ();if _bbe !=nil {return _cdb .MakeString (string (_gabc )),_bbe ;};if _cdb .IsOctalDigit (_afccg ){_ace ,_bde :=_efa ._bgd .Peek (2);
if _bde !=nil {return _cdb .MakeString (string (_gabc )),_bde ;};var _affd []byte ;_affd =append (_affd ,_afccg );for _ ,_cgggg :=range _ace {if _cdb .IsOctalDigit (_cgggg ){_affd =append (_affd ,_cgggg );}else {break ;};};_efa ._bgd .Discard (len (_affd )-1);
_fc .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_affd );_efcc ,_bde :=_g .ParseUint (string (_affd ),8,32);if _bde !=nil {return _cdb .MakeString (string (_gabc )),_bde ;};_gabc =append (_gabc ,byte (_efcc ));
continue ;};switch _afccg {case 'n':_gabc =append (_gabc ,'\n');case 'r':_gabc =append (_gabc ,'\r');case 't':_gabc =append (_gabc ,'\t');case 'b':_gabc =append (_gabc ,'\b');case 'f':_gabc =append (_gabc ,'\f');case '(':_gabc =append (_gabc ,'(');case ')':_gabc =append (_gabc ,')');
case '\\':_gabc =append (_gabc ,'\\');};continue ;}else if _befe [0]=='('{_fffb ++;}else if _befe [0]==')'{_fffb --;if _fffb ==0{_efa ._bgd .ReadByte ();break ;};};_bedg ,_ :=_efa ._bgd .ReadByte ();_gabc =append (_gabc ,_bedg );};return _cdb .MakeString (string (_gabc )),nil ;
};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cgf *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_eca :=ContentStreamOperation {};_eca .Operand ="\u0054\u006d";_eca .Params =_cdce ([]float64 {a ,b ,c ,d ,e ,f });_cgf ._ce =append (_cgf ._ce ,&_eca );return _cgf ;};func (_cdge *ContentStreamParser )parseObject ()(_gddb _cdb .PdfObject ,_fdd bool ,_eebb error ){_cdge .skipSpaces ();
for {_faec ,_aac :=_cdge ._bgd .Peek (2);if _aac !=nil {return nil ,false ,_aac ;};_fc .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_faec ));if _faec [0]=='%'{_cdge .skipComments ();continue ;}else if _faec [0]=='/'{_aabg ,_fdb :=_cdge .parseName ();
_fc .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_aabg );return &_aabg ,false ,_fdb ;}else if _faec [0]=='('{_fc .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_aagg ,_gbag :=_cdge .parseString ();return _aagg ,false ,_gbag ;
}else if _faec [0]=='<'&&_faec [1]!='<'{_fc .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_gabb ,_eagc :=_cdge .parseHexString ();return _gabb ,false ,_eagc ;}else if _faec [0]=='['{_fc .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");
_ffda ,_dfa :=_cdge .parseArray ();return _ffda ,false ,_dfa ;}else if _cdb .IsFloatDigit (_faec [0])||(_faec [0]=='-'&&_cdb .IsFloatDigit (_faec [1]))||(_faec [0]=='+'&&_cdb .IsFloatDigit (_faec [1])){_fc .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_fag ,_ddfa :=_cdge .parseNumber ();return _fag ,false ,_ddfa ;}else if _faec [0]=='<'&&_faec [1]=='<'{_afef ,_fgb :=_cdge .parseDict ();return _afef ,false ,_fgb ;}else {_fc .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_faec ,_ =_cdge ._bgd .Peek (5);_afgee :=string (_faec );_fc .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_afgee );if (len (_afgee )> 3)&&(_afgee [:4]=="\u006e\u0075\u006c\u006c"){_eedd ,_ccdf :=_cdge .parseNull ();
return &_eedd ,false ,_ccdf ;}else if (len (_afgee )> 4)&&(_afgee [:5]=="\u0066\u0061\u006cs\u0065"){_daff ,_afca :=_cdge .parseBool ();return &_daff ,false ,_afca ;}else if (len (_afgee )> 3)&&(_afgee [:4]=="\u0074\u0072\u0075\u0065"){_efab ,_cgge :=_cdge .parseBool ();
return &_efab ,false ,_cgge ;};_gcdd ,_eabe :=_cdge .parseOperand ();if _eabe !=nil {return _gcdd ,false ,_eabe ;};if len (_gcdd .String ())< 1{return _gcdd ,false ,ErrInvalidOperand ;};return _gcdd ,true ,nil ;};};};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gac *ContentCreator )Add_n ()*ContentCreator {_bba :=ContentStreamOperation {};_bba .Operand ="\u006e";_gac ._ce =append (_gac ._ce ,&_bba );return _gac ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ded *ContentCreator )Add_f ()*ContentCreator {_bed :=ContentStreamOperation {};_bed .Operand ="\u0066";_ded ._ce =append (_ded ._ce ,&_bed );return _ded ;};func _cbc (_fga *ContentStreamInlineImage ,_efd *_cdb .PdfObjectDictionary )(*_cdb .FlateEncoder ,error ){_egc :=_cdb .NewFlateEncoder ();
if _fga ._abcf !=nil {_egc .SetImage (_fga ._abcf );};if _efd ==nil {_cae :=_fga .DecodeParms ;if _cae !=nil {_bda ,_bccg :=_cdb .GetDict (_cae );if !_bccg {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cae );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_efd =_bda ;};};if _efd ==nil {return _egc ,nil ;};_fc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_efd .String ());
_bce :=_efd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _bce ==nil {_fc .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_ffc ,_gba :=_bce .(*_cdb .PdfObjectInteger );if !_gba {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_bce );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_egc .Predictor =int (*_ffc );};_bce =_efd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _bce !=nil {_cdbf ,_edf :=_bce .(*_cdb .PdfObjectInteger );if !_edf {_fc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ff .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_egc .BitsPerComponent =int (*_cdbf );};if _egc .Predictor > 1{_egc .Columns =1;_bce =_efd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _bce !=nil {_agbc ,_fea :=_bce .(*_cdb .PdfObjectInteger );if !_fea {return nil ,_ff .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_egc .Columns =int (*_agbc );
};_egc .Colors =1;_beae :=_efd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _beae !=nil {_fbb ,_afb :=_beae .(*_cdb .PdfObjectInteger );if !_afb {return nil ,_ff .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_egc .Colors =int (*_fbb );};};return _egc ,nil ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// WriteString outputs the object as it is to be written to file.
func (_dgge *ContentStreamInlineImage )WriteString ()string {var _ceb _eeb .Buffer ;_cee :="";if _dgge .BitsPerComponent !=nil {_cee +="\u002f\u0042\u0050C\u0020"+_dgge .BitsPerComponent .WriteString ()+"\u000a";};if _dgge .ColorSpace !=nil {_cee +="\u002f\u0043\u0053\u0020"+_dgge .ColorSpace .WriteString ()+"\u000a";
};if _dgge .Decode !=nil {_cee +="\u002f\u0044\u0020"+_dgge .Decode .WriteString ()+"\u000a";};if _dgge .DecodeParms !=nil {_cee +="\u002f\u0044\u0050\u0020"+_dgge .DecodeParms .WriteString ()+"\u000a";};if _dgge .Filter !=nil {_cee +="\u002f\u0046\u0020"+_dgge .Filter .WriteString ()+"\u000a";
};if _dgge .Height !=nil {_cee +="\u002f\u0048\u0020"+_dgge .Height .WriteString ()+"\u000a";};if _dgge .ImageMask !=nil {_cee +="\u002f\u0049\u004d\u0020"+_dgge .ImageMask .WriteString ()+"\u000a";};if _dgge .Intent !=nil {_cee +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_dgge .Intent .WriteString ()+"\u000a";
};if _dgge .Interpolate !=nil {_cee +="\u002f\u0049\u0020"+_dgge .Interpolate .WriteString ()+"\u000a";};if _dgge .Width !=nil {_cee +="\u002f\u0057\u0020"+_dgge .Width .WriteString ()+"\u000a";};_ceb .WriteString (_cee );_ceb .WriteString ("\u0049\u0044\u0020");
_ceb .Write (_dgge ._dad );_ceb .WriteString ("\u000a\u0045\u0049\u000a");return _ceb .String ();};func (_fdf *ContentStreamProcessor )handleCommand_k (_ecaa *ContentStreamOperation ,_bcce *_fd .PdfPageResources )error {_dee :=_fd .NewPdfColorspaceDeviceCMYK ();
if len (_ecaa .Params )!=_dee .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecaa .Params ),_dee );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dbbf ,_gbf :=_dee .ColorFromPdfObjects (_ecaa .Params );if _gbf !=nil {return _gbf ;};_fdf ._dacfa .ColorspaceNonStroking =_dee ;_fdf ._dacfa .ColorNonStroking =_dbbf ;return nil ;};

// AddOperand adds a specified operand.
func (_bd *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_bd ._ce =append (_bd ._ce ,&op );return _bd ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_eagf *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_abgd :=ContentStreamOperation {};_abgd .Operand ="\u006d";_abgd .Params =_cdce ([]float64 {x ,y });_eagf ._ce =append (_eagf ._ce ,&_abgd );return _eagf ;};

// Operations returns the list of operations.
func (_ed *ContentCreator )Operations ()*ContentStreamOperations {return &_ed ._ce };func (_agad *ContentStreamProcessor )handleCommand_CS (_cfec *ContentStreamOperation ,_cege *_fd .PdfPageResources )error {if len (_cfec .Params )< 1{_fc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cfec .Params )> 1{_fc .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_baa ,_dcgdg :=_cfec .Params [0].(*_cdb .PdfObjectName );if !_dcgdg {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_addc ,_egea :=_agad .getColorspace (string (*_baa ),_cege );if _egea !=nil {return _egea ;};_agad ._dacfa .ColorspaceStroking =_addc ;_affc ,_egea :=_agad .getInitialColor (_addc );
if _egea !=nil {return _egea ;};_agad ._dacfa .ColorStroking =_affc ;return nil ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_afd *ContentCreator )Add_B ()*ContentCreator {_bg :=ContentStreamOperation {};_bg .Operand ="\u0042";_afd ._ce =append (_afd ._ce ,&_bg );return _afd ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bga *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_gefg :=ContentStreamOperation {};_gefg .Operand ="\u0054\u0064";_gefg .Params =_cdce ([]float64 {tx ,ty });_bga ._ce =append (_bga ._ce ,&_gefg );return _bga ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_caee *ContentStreamProcessor )Process (resources *_fd .PdfPageResources )error {_caee ._dacfa .ColorspaceStroking =_fd .NewPdfColorspaceDeviceGray ();_caee ._dacfa .ColorspaceNonStroking =_fd .NewPdfColorspaceDeviceGray ();_caee ._dacfa .ColorStroking =_fd .NewPdfColorDeviceGray (0);
_caee ._dacfa .ColorNonStroking =_fd .NewPdfColorDeviceGray (0);_caee ._dacfa .CTM =_ec .IdentityMatrix ();for _ ,_fac :=range _caee ._gfb {var _fed error ;switch _fac .Operand {case "\u0071":_caee ._caecd .Push (_caee ._dacfa );case "\u0051":if len (_caee ._caecd )==0{_fc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_caee ._dacfa =_caee ._caecd .Pop ();case "\u0043\u0053":_fed =_caee .handleCommand_CS (_fac ,resources );case "\u0063\u0073":_fed =_caee .handleCommand_cs (_fac ,resources );case "\u0053\u0043":_fed =_caee .handleCommand_SC (_fac ,resources );
case "\u0053\u0043\u004e":_fed =_caee .handleCommand_SCN (_fac ,resources );case "\u0073\u0063":_fed =_caee .handleCommand_sc (_fac ,resources );case "\u0073\u0063\u006e":_fed =_caee .handleCommand_scn (_fac ,resources );case "\u0047":_fed =_caee .handleCommand_G (_fac ,resources );
case "\u0067":_fed =_caee .handleCommand_g (_fac ,resources );case "\u0052\u0047":_fed =_caee .handleCommand_RG (_fac ,resources );case "\u0072\u0067":_fed =_caee .handleCommand_rg (_fac ,resources );case "\u004b":_fed =_caee .handleCommand_K (_fac ,resources );
case "\u006b":_fed =_caee .handleCommand_k (_fac ,resources );case "\u0063\u006d":_fed =_caee .handleCommand_cm (_fac ,resources );};if _fed !=nil {_fc .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_fac .Operand ,_fed );
_fc .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_fac .Operand );return _fed ;};for _ ,_gggcc :=range _caee ._gdcf {var _fgbe error ;if _gggcc .Condition .All (){_fgbe =_gggcc .Handler (_fac ,_caee ._dacfa ,resources );
}else if _gggcc .Condition .Operand ()&&_fac .Operand ==_gggcc .Operand {_fgbe =_gggcc .Handler (_fac ,_caee ._dacfa ,resources );};if _fgbe !=nil {_fc .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_fgbe );
return _fgbe ;};};};return nil ;};func (_addb *ContentStreamParser )parseBool ()(_cdb .PdfObjectBool ,error ){_ebec ,_eebe :=_addb ._bgd .Peek (4);if _eebe !=nil {return _cdb .PdfObjectBool (false ),_eebe ;};if (len (_ebec )>=4)&&(string (_ebec [:4])=="\u0074\u0072\u0075\u0065"){_addb ._bgd .Discard (4);
return _cdb .PdfObjectBool (true ),nil ;};_ebec ,_eebe =_addb ._bgd .Peek (5);if _eebe !=nil {return _cdb .PdfObjectBool (false ),_eebe ;};if (len (_ebec )>=5)&&(string (_ebec [:5])=="\u0066\u0061\u006cs\u0065"){_addb ._bgd .Discard (5);return _cdb .PdfObjectBool (false ),nil ;
};return _cdb .PdfObjectBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// RotateDeg applies a rotation to the transformation matrix.
func (_gfc *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ade :=_ee .Cos (angle *_ee .Pi /180.0);_caf :=_ee .Sin (angle *_ee .Pi /180.0);_abg :=-_ee .Sin (angle *_ee .Pi /180.0);_da :=_ee .Cos (angle *_ee .Pi /180.0);return _gfc .Add_cm (_ade ,_caf ,_abg ,_da ,0,0);
};var _ccbf =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ece *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cb :=ContentStreamOperation {};_cb .Operand ="\u0063\u006d";_cb .Params =_cdce ([]float64 {a ,b ,c ,d ,e ,f });_ece ._ce =append (_ece ._ce ,&_cb );return _ece ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fca *ContentStreamOperations )Bytes ()[]byte {var _bb _eeb .Buffer ;for _ ,_de :=range *_fca {if _de ==nil {continue ;};if _de .Operand =="\u0042\u0049"{_bb .WriteString (_de .Operand +"\u000a");_bb .WriteString (_de .Params [0].WriteString ());
}else {for _ ,_agd :=range _de .Params {_bb .WriteString (_agd .WriteString ());_bb .WriteString ("\u0020");};_bb .WriteString (_de .Operand +"\u000a");};};return _bb .Bytes ();};func (_dae *ContentStreamProcessor )handleCommand_sc (_agcc *ContentStreamOperation ,_bbgb *_fd .PdfPageResources )error {_caeg :=_dae ._dacfa .ColorspaceNonStroking ;
if !_bbb (_caeg ){if len (_agcc .Params )!=_caeg .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agcc .Params ),_caeg );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_fbbd ,_adgd :=_caeg .ColorFromPdfObjects (_agcc .Params );if _adgd !=nil {return _adgd ;};_dae ._dacfa .ColorNonStroking =_fbbd ;return nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fba *ContentCreator )Add_quotes (textstr _cdb .PdfObjectString ,aw ,ac float64 )*ContentCreator {_fbae :=ContentStreamOperation {};_fbae .Operand ="\u0022";_fbae .Params =_cdce ([]float64 {aw ,ac });_fbae .Params =append (_fbae .Params ,_ffea ([]_cdb .PdfObjectString {textstr })...);
_fba ._ce =append (_fba ._ce ,&_fbae );return _fba ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_ecdf *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _ecdf .CTM .Transform (x ,y );};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ac *ContentCreator )Add_q ()*ContentCreator {_eag :=ContentStreamOperation {};_eag .Operand ="\u0071";_ac ._ce =append (_ac ._ce ,&_eag );return _ac ;};func (_bfe *ContentStreamProcessor )handleCommand_SCN (_baef *ContentStreamOperation ,_bbga *_fd .PdfPageResources )error {_afab :=_bfe ._dacfa .ColorspaceStroking ;
if !_bbb (_afab ){if len (_baef .Params )!=_afab .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_baef .Params ),_afab );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_dfc ,_dacb :=_afab .ColorFromPdfObjects (_baef .Params );if _dacb !=nil {return _dacb ;};_bfe ._dacfa .ColorStroking =_dfc ;return nil ;};func _cdce (_ffff []float64 )[]_cdb .PdfObject {var _dfab []_cdb .PdfObject ;for _ ,_dbfb :=range _ffff {_dfab =append (_dfab ,_cdb .MakeFloat (_dbfb ));
};return _dfab ;};func (_cafa *ContentStreamInlineImage )toImageBase (_gaac *_fd .PdfPageResources )(*_a .ImageBase ,error ){if _cafa ._abcf !=nil {return _cafa ._abcf ,nil ;};_edfd :=_a .ImageBase {};if _cafa .Height ==nil {return nil ,_c .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_cdc ,_febd :=_cafa .Height .(*_cdb .PdfObjectInteger );if !_febd {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_edfd .Height =int (*_cdc );if _cafa .Width ==nil {return nil ,_c .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_cbd ,_febd :=_cafa .Width .(*_cdb .PdfObjectInteger );if !_febd {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_edfd .Width =int (*_cbd );_bfc ,_gga :=_cafa .IsMask ();if _gga !=nil {return nil ,_gga ;
};if _bfc {_edfd .BitsPerComponent =1;_edfd .ColorComponents =1;}else {if _cafa .BitsPerComponent ==nil {_fc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_edfd .BitsPerComponent =8;}else {_bdgg ,_ecaf :=_cafa .BitsPerComponent .(*_cdb .PdfObjectInteger );if !_ecaf {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cafa .BitsPerComponent );
return nil ,_c .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_edfd .BitsPerComponent =int (*_bdgg );};if _cafa .ColorSpace !=nil {_egca ,_gaab :=_cafa .GetColorSpace (_gaac );if _gaab !=nil {return nil ,_gaab ;
};_edfd .ColorComponents =_egca .GetNumComponents ();}else {_fc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_edfd .ColorComponents =1;};};if _eeaf ,_gbad :=_cdb .GetArray (_cafa .Decode );_gbad {_edfd .Decode ,_gga =_eeaf .ToFloat64Array ();if _gga !=nil {return nil ,_gga ;};};_cafa ._abcf =&_edfd ;return _cafa ._abcf ,nil ;};func _dfff (_dded *ContentStreamInlineImage ,_gefd *_cdb .PdfObjectDictionary )(*_cdb .LZWEncoder ,error ){_ba :=_cdb .NewLZWEncoder ();
if _gefd ==nil {if _dded .DecodeParms !=nil {_dcg ,_daf :=_cdb .GetDict (_dded .DecodeParms );if !_daf {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dded .DecodeParms );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_gefd =_dcg ;};};if _gefd ==nil {return _ba ,nil ;};_afc :=_gefd .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _afc !=nil {_ffba ,_gacgg :=_afc .(*_cdb .PdfObjectInteger );if !_gacgg {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_afc );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_ffba !=0&&*_ffba !=1{return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_ba .EarlyChange =int (*_ffba );}else {_ba .EarlyChange =1;};_afc =_gefd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _afc !=nil {_bae ,_ebc :=_afc .(*_cdb .PdfObjectInteger );if !_ebc {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_afc );
return nil ,_ff .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ba .Predictor =int (*_bae );};_afc =_gefd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _afc !=nil {_fge ,_bac :=_afc .(*_cdb .PdfObjectInteger );if !_bac {_fc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ff .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ba .BitsPerComponent =int (*_fge );};if _ba .Predictor > 1{_ba .Columns =1;_afc =_gefd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _afc !=nil {_bead ,_agc :=_afc .(*_cdb .PdfObjectInteger );if !_agc {return nil ,_ff .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ba .Columns =int (*_bead );
};_ba .Colors =1;_afc =_gefd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _afc !=nil {_fbgc ,_bef :=_afc .(*_cdb .PdfObjectInteger );if !_bef {return nil ,_ff .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_ba .Colors =int (*_fbgc );};};_fc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gefd .String ());return _ba ,nil ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ffb *ContentCreator )Add_Q ()*ContentCreator {_ceg :=ContentStreamOperation {};_ceg .Operand ="\u0051";_ffb ._ce =append (_ffb ._ce ,&_ceg );return _ffb ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_cdb .PdfObject ;Operand string ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cbe *ContentCreator )Add_g (gray float64 )*ContentCreator {_cgb :=ContentStreamOperation {};_cgb .Operand ="\u0067";_cgb .Params =_cdce ([]float64 {gray });_cbe ._ce =append (_cbe ._ce ,&_cgb );return _cbe ;};func (_debe *ContentStreamParser )parseArray ()(*_cdb .PdfObjectArray ,error ){_gbg :=_cdb .MakeArray ();
_debe ._bgd .ReadByte ();for {_debe .skipSpaces ();_abee ,_ddcd :=_debe ._bgd .Peek (1);if _ddcd !=nil {return _gbg ,_ddcd ;};if _abee [0]==']'{_debe ._bgd .ReadByte ();break ;};_cdcg ,_ ,_ddcd :=_debe .parseObject ();if _ddcd !=nil {return _gbg ,_ddcd ;
};_gbg .Append (_cdcg );};return _gbg ,nil ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_fgg *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_bccb :=handlerEntry {};_bccb .Condition =condition ;_bccb .Operand =operand ;_bccb .Handler =handler ;_fgg ._gdcf =append (_fgg ._gdcf ,_bccb );
};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ce ContentStreamOperations };

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cfg *ContentCreator )Add_TJ (vals ..._cdb .PdfObject )*ContentCreator {_cbgd :=ContentStreamOperation {};_cbgd .Operand ="\u0054\u004a";_cbgd .Params =[]_cdb .PdfObject {_cdb .MakeArray (vals ...)};_cfg ._ce =append (_cfg ._ce ,&_cbgd );return _cfg ;
};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_fa *ContentStreamParser )ExtractText ()(string ,error ){_gf ,_eg :=_fa .Parse ();if _eg !=nil {return "",_eg ;};_gg :=false ;_ecf ,_fdg :=float64 (-1),float64 (-1);_af :="";for _ ,_ecc :=range *_gf {if _ecc .Operand =="\u0042\u0054"{_gg =true ;}else if _ecc .Operand =="\u0045\u0054"{_gg =false ;
};if _ecc .Operand =="\u0054\u0064"||_ecc .Operand =="\u0054\u0044"||_ecc .Operand =="\u0054\u002a"{_af +="\u000a";};if _ecc .Operand =="\u0054\u006d"{if len (_ecc .Params )!=6{continue ;};_fg ,_faa :=_ecc .Params [4].(*_cdb .PdfObjectFloat );if !_faa {_cg ,_eae :=_ecc .Params [4].(*_cdb .PdfObjectInteger );
if !_eae {continue ;};_fg =_cdb .MakeFloat (float64 (*_cg ));};_fff ,_faa :=_ecc .Params [5].(*_cdb .PdfObjectFloat );if !_faa {_ad ,_cgg :=_ecc .Params [5].(*_cdb .PdfObjectInteger );if !_cgg {continue ;};_fff =_cdb .MakeFloat (float64 (*_ad ));};if _fdg ==-1{_fdg =float64 (*_fff );
}else if _fdg > float64 (*_fff ){_af +="\u000a";_ecf =float64 (*_fg );_fdg =float64 (*_fff );continue ;};if _ecf ==-1{_ecf =float64 (*_fg );}else if _ecf < float64 (*_fg ){_af +="\u0009";_ecf =float64 (*_fg );};};if _gg &&_ecc .Operand =="\u0054\u004a"{if len (_ecc .Params )< 1{continue ;
};_abc ,_ge :=_ecc .Params [0].(*_cdb .PdfObjectArray );if !_ge {return "",_ff .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ecc .Params [0]);
};for _ ,_aff :=range _abc .Elements (){switch _eab :=_aff .(type ){case *_cdb .PdfObjectString :_af +=_eab .Str ();case *_cdb .PdfObjectFloat :if *_eab < -100{_af +="\u0020";};case *_cdb .PdfObjectInteger :if *_eab < -100{_af +="\u0020";};};};}else if _gg &&_ecc .Operand =="\u0054\u006a"{if len (_ecc .Params )< 1{continue ;
};_eeg ,_ef :=_ecc .Params [0].(*_cdb .PdfObjectString );if !_ef {return "",_ff .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ecc .Params [0]);
};_af +=_eeg .Str ();};};return _af ,nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gae *ContentCreator )Add_BT ()*ContentCreator {_acc :=ContentStreamOperation {};_acc .Operand ="\u0042\u0054";_gae ._ce =append (_gae ._ce ,&_acc );return _gae ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dff *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_acb :=ContentStreamOperation {};_acb .Operand ="\u0054\u0063";_acb .Params =_cdce ([]float64 {charSpace });_dff ._ce =append (_dff ._ce ,&_acb );return _dff ;};

// String returns `ops.Bytes()` as a string.
func (_be *ContentStreamOperations )String ()string {return string (_be .Bytes ())};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ffd *ContentCreator )Add_Tstar ()*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0054\u002a";_ffd ._ce =append (_ffd ._ce ,&_daa );return _ffd ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cfe *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u0079";_fdc .Params =_cdce ([]float64 {x1 ,y1 ,x3 ,y3 });_cfe ._ce =append (_cfe ._ce ,&_fdc );return _cfe ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ecg *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ccb :=ContentStreamOperation {};_ccb .Operand ="\u004a";_ccb .Params =_gfa ([]_cdb .PdfObjectName {_cdb .PdfObjectName (lineCapStyle )});_ecg ._ce =append (_ecg ._ce ,&_ccb );return _ecg ;
};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_eda *ContentCreator )Add_W_starred ()*ContentCreator {_egf :=ContentStreamOperation {};_egf .Operand ="\u0057\u002a";_eda ._ce =append (_eda ._ce ,&_egf );return _eda ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cafc *ContentCreator )Add_f_starred ()*ContentCreator {_cggg :=ContentStreamOperation {};_cggg .Operand ="\u0066\u002a";_cafc ._ce =append (_cafc ._ce ,&_cggg );return _cafc ;};

// Push pushes `gs` on the `gsStack`.
func (_bbg *GraphicStateStack )Push (gs GraphicsState ){*_bbg =append (*_bbg ,gs )};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_dbec HandlerConditionEnum )All ()bool {return _dbec ==HandlerConditionEnumAllOperands };func (_caed *ContentStreamProcessor )handleCommand_rg (_fbag *ContentStreamOperation ,_bag *_fd .PdfPageResources )error {_cgbb :=_fd .NewPdfColorspaceDeviceRGB ();
if len (_fbag .Params )!=_cgbb .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fbag .Params ),_cgbb );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_accaa ,_ggb :=_cgbb .ColorFromPdfObjects (_fbag .Params );if _ggb !=nil {return _ggb ;};_caed ._dacfa .ColorspaceNonStroking =_cgbb ;_caed ._dacfa .ColorNonStroking =_accaa ;return nil ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bfg *ContentCreator )Add_B_starred ()*ContentCreator {_bge :=ContentStreamOperation {};_bge .Operand ="\u0042\u002a";_bfg ._ce =append (_bfg ._ce ,&_bge );return _bfg ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fe *ContentCreator )Add_Tf (fontName _cdb .PdfObjectName ,fontSize float64 )*ContentCreator {_ddce :=ContentStreamOperation {};_ddce .Operand ="\u0054\u0066";_ddce .Params =_gfa ([]_cdb .PdfObjectName {fontName });_ddce .Params =append (_ddce .Params ,_cdce ([]float64 {fontSize })...);
_fe ._ce =append (_fe ._ce ,&_ddce );return _fe ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dbe *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_fgf :=ContentStreamOperation {};_fgf .Operand ="\u0072\u0065";_fgf .Params =_cdce ([]float64 {x ,y ,width ,height });_dbe ._ce =append (_dbe ._ce ,&_fgf );return _dbe ;};


// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _fd .PdfColorspace ;ColorspaceNonStroking _fd .PdfColorspace ;ColorStroking _fd .PdfColor ;ColorNonStroking _fd .PdfColor ;CTM _ec .Matrix ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_abff *ContentStreamOperation ,_beba GraphicsState ,_bad *_fd .PdfPageResources )error ;func (_bfgc *ContentStreamProcessor )handleCommand_K (_dbae *ContentStreamOperation ,_abgec *_fd .PdfPageResources )error {_gdcfa :=_fd .NewPdfColorspaceDeviceCMYK ();
if len (_dbae .Params )!=_gdcfa .GetNumComponents (){_fc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_fc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dbae .Params ),_gdcfa );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_facf ,_baca :=_gdcfa .ColorFromPdfObjects (_dbae .Params );if _baca !=nil {return _baca ;};_bfgc ._dacfa .ColorspaceStroking =_gdcfa ;_bfgc ._dacfa .ColorStroking =_facf ;return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_db *ContentCreator )Bytes ()[]byte {return _db ._ce .Bytes ()};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dfb *ContentCreator )Add_quote (textstr _cdb .PdfObjectString )*ContentCreator {_ggf :=ContentStreamOperation {};_ggf .Operand ="\u0027";_ggf .Params =_ffea ([]_cdb .PdfObjectString {textstr });_dfb ._ce =append (_dfb ._ce ,&_ggf );return _dfb ;
};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_cbed :=ContentStreamParser {};_dacf :=_eeb .NewBufferString (contentStr +"\u000a");_cbed ._bgd =_e .NewReader (_dacf );return &_cbed ;};func _gfa (_daaa []_cdb .PdfObjectName )[]_cdb .PdfObject {var _fcae []_cdb .PdfObject ;
for _ ,_faefe :=range _daaa {_fcae =append (_fcae ,_cdb .MakeName (string (_faefe )));};return _fcae ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dgb *ContentCreator )SetNonStrokingColor (color _fd .PdfColor )*ContentCreator {switch _ffbb :=color .(type ){case *_fd .PdfColorDeviceGray :_dgb .Add_g (_ffbb .Val ());case *_fd .PdfColorDeviceRGB :_dgb .Add_rg (_ffbb .R (),_ffbb .G (),_ffbb .B ());
case *_fd .PdfColorDeviceCMYK :_dgb .Add_k (_ffbb .C (),_ffbb .M (),_ffbb .Y (),_ffbb .K ());default:_fc .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_ffbb );
};return _dgb ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gab *ContentCreator )Add_EMC ()*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u0045\u004d\u0043";_gab ._ce =append (_gab ._ce ,&_feb );return _gab ;};func (_ege *ContentStreamParser )skipSpaces ()(int ,error ){_ecce :=0;for {_ebgb ,_bcee :=_ege ._bgd .Peek (1);
if _bcee !=nil {return 0,_bcee ;};if _cdb .IsWhiteSpace (_ebgb [0]){_ege ._bgd .ReadByte ();_ecce ++;}else {break ;};};return _ecce ,nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_acf *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_ebd :=ContentStreamOperation {};_ebd .Operand ="\u006c";_ebd .Params =_cdce ([]float64 {x ,y });_acf ._ce =append (_acf ._ce ,&_ebd );return _acf ;};func _egd (_dfg string )bool {_ ,_befg :=_ccbf [_dfg ];
return _befg };func (_caec *ContentStreamParser )parseDict ()(*_cdb .PdfObjectDictionary ,error ){_fc .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_cacg :=_cdb .MakeDict ();_dcfb ,_ :=_caec ._bgd .ReadByte ();if _dcfb !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_dcfb ,_ =_caec ._bgd .ReadByte ();if _dcfb !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_caec .skipSpaces ();_aag ,_eafb :=_caec ._bgd .Peek (2);if _eafb !=nil {return nil ,_eafb ;};_fc .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_aag ),string (_aag ));if (_aag [0]=='>')&&(_aag [1]=='>'){_fc .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_caec ._bgd .ReadByte ();_caec ._bgd .ReadByte ();break ;};_fc .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_dcc ,_eafb :=_caec .parseName ();_fc .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dcc );
if _eafb !=nil {_fc .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_eafb );return nil ,_eafb ;};if len (_dcc )> 4&&_dcc [len (_dcc )-4:]=="\u006e\u0075\u006c\u006c"{_gdda :=_dcc [0:len (_dcc )-4];
_fc .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_dcc );_fc .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_gdda );
_caec .skipSpaces ();_gfg ,_ :=_caec ._bgd .Peek (1);if _gfg [0]=='/'{_cacg .Set (_gdda ,_cdb .MakeNull ());continue ;};};_caec .skipSpaces ();_gcbf ,_ ,_eafb :=_caec .parseObject ();if _eafb !=nil {return nil ,_eafb ;};_cacg .Set (_dcc ,_gcbf );_fc .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_dcc ,_gcbf .String ());
};return _cacg ,nil ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gc *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_bdb :=ContentStreamOperation {};_bdb .Operand ="\u0054\u007a";_bdb .Params =_cdce ([]float64 {scale });_gc ._ce =append (_gc ._ce ,&_bdb );return _gc ;};func (_bgde *ContentStreamParser )parseNull ()(_cdb .PdfObjectNull ,error ){_ ,_dcgb :=_bgde ._bgd .Discard (4);
return _cdb .PdfObjectNull {},_dcgb ;};func _bbb (_fef _fd .PdfColorspace )bool {_ ,_abfe :=_fef .(*_fd .PdfColorspaceSpecialPattern );return _abfe ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_caecd GraphicStateStack ;_gfb []*ContentStreamOperation ;_dacfa GraphicsState ;_gdcf []handlerEntry ;_adgc int ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_afgf *ContentStreamInlineImage )IsMask ()(bool ,error ){if _afgf .ImageMask !=nil {_baf ,_ebe :=_afgf .ImageMask .(*_cdb .PdfObjectBool );if !_ebe {_fc .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_c .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_baf ),nil ;};return false ,nil ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ega *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_gcc :=ContentStreamOperation {};_gcc .Operand ="\u0054\u0073";_gcc .Params =_cdce ([]float64 {rise });_ega ._ce =append (_ega ._ce ,&_gcc );return _ega ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fda *ContentCreator )Add_b ()*ContentCreator {_dbg :=ContentStreamOperation {};_dbg .Operand ="\u0062";_fda ._ce =append (_fda ._ce ,&_dbg );return _fda ;};