//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_db "errors";_cc "github.com/unidoc/unipdf/v3/internal/bitwise";_c "io";_b "math";);var (_a *treeNode ;_de *treeNode ;_f *tree ;_e *tree ;_ccg *tree ;_bg *tree ;_dc =-2000;_dbf =-1000;_g =-3000;_fg =-4000;);func init (){_a =&treeNode {_dfc :true ,_dde :_dc };
_de =&treeNode {_dde :_dbf ,_abd :_a };_de ._cafd =_de ;_ccg =&tree {_gfaa :&treeNode {}};if _bc :=_ccg .fillWithNode (12,0,_de );_bc !=nil {panic (_bc .Error ());};if _ce :=_ccg .fillWithNode (12,1,_a );_ce !=nil {panic (_ce .Error ());};_f =&tree {_gfaa :&treeNode {}};
for _ac :=0;_ac < len (_aga );_ac ++{for _ec :=0;_ec < len (_aga [_ac ]);_ec ++{if _fb :=_f .fill (_ac +2,int (_aga [_ac ][_ec ]),int (_bd [_ac ][_ec ]));_fb !=nil {panic (_fb .Error ());};};};if _da :=_f .fillWithNode (12,0,_de );_da !=nil {panic (_da .Error ());
};if _af :=_f .fillWithNode (12,1,_a );_af !=nil {panic (_af .Error ());};_e =&tree {_gfaa :&treeNode {}};for _gf :=0;_gf < len (_add );_gf ++{for _bcg :=0;_bcg < len (_add [_gf ]);_bcg ++{if _daa :=_e .fill (_gf +4,int (_add [_gf ][_bcg ]),int (_gd [_gf ][_bcg ]));
_daa !=nil {panic (_daa .Error ());};};};if _cf :=_e .fillWithNode (12,0,_de );_cf !=nil {panic (_cf .Error ());};if _acd :=_e .fillWithNode (12,1,_a );_acd !=nil {panic (_acd .Error ());};_bg =&tree {_gfaa :&treeNode {}};if _ba :=_bg .fill (4,1,_g );_ba !=nil {panic (_ba .Error ());
};if _fd :=_bg .fill (3,1,_fg );_fd !=nil {panic (_fd .Error ());};if _ad :=_bg .fill (1,1,0);_ad !=nil {panic (_ad .Error ());};if _dcg :=_bg .fill (3,3,1);_dcg !=nil {panic (_dcg .Error ());};if _baa :=_bg .fill (6,3,2);_baa !=nil {panic (_baa .Error ());
};if _ag :=_bg .fill (7,3,3);_ag !=nil {panic (_ag .Error ());};if _eb :=_bg .fill (3,2,-1);_eb !=nil {panic (_eb .Error ());};if _gff :=_bg .fill (6,2,-2);_gff !=nil {panic (_gff .Error ());};if _dae :=_bg .fill (7,2,-3);_dae !=nil {panic (_dae .Error ());
};};func (_ceae *Decoder )decodeRowType6 ()error {if _ceae ._bcaf {_ceae ._eaf .Align ();};if _ceae ._bca {_ceae ._eaf .Mark ();_aebe ,_df :=_ceae .tryFetchEOL ();if _df !=nil {return _df ;};if _aebe {_aebe ,_df =_ceae .tryFetchEOL ();if _df !=nil {return _df ;
};if _aebe {return _c .EOF ;};};_ceae ._eaf .Reset ();};return _ceae .decode2D ();};func (_gdac *Decoder )tryFetchEOL1 ()(bool ,error ){_ceag ,_cgf :=_gdac ._eaf .ReadBits (13);if _cgf !=nil {return false ,_cgf ;};return _ceag ==0x3,nil ;};func _ceg (_ge []byte ,_bcf bool ,_dgb int )(int ,int ){_bdbf :=0;
for _dgb < len (_ge ){if _bcf {if _ge [_dgb ]!=_ddgd {break ;};}else {if _ge [_dgb ]!=_gae {break ;};};_bdbf ++;_dgb ++;};return _bdbf ,_dgb ;};func _fda (_cdf []byte ,_eag int ,_agb code )([]byte ,int ){_adbb :=0;for _adbb < _agb .BitsWritten {_egd :=_eag /8;
_acgb :=_eag %8;if _egd >=len (_cdf ){_cdf =append (_cdf ,0);};_aff :=8-_acgb ;_cfcc :=_agb .BitsWritten -_adbb ;if _aff > _cfcc {_aff =_cfcc ;};if _adbb < 8{_cdf [_egd ]=_cdf [_egd ]|byte (_agb .Code >>uint (8+_acgb -_adbb ))&_gb [8-_aff -_acgb ];}else {_cdf [_egd ]=_cdf [_egd ]|(byte (_agb .Code <<uint (_adbb -8))&_gb [8-_aff ])>>uint (_acgb );
};_eag +=_aff ;_adbb +=_aff ;};return _cdf ,_eag ;};func (_ecc *Encoder )encodeG4 (_cfa [][]byte )[]byte {_dbbd :=make ([][]byte ,len (_cfa ));copy (_dbbd ,_cfa );_dbbd =_gbee (_dbbd );var _bbb []byte ;var _afgb int ;for _ggd :=1;_ggd < len (_dbbd );_ggd ++{if _ecc .Rows > 0&&!_ecc .EndOfBlock &&_ggd ==(_ecc .Rows +1){break ;
};var _fcfc []byte ;var _cga ,_bffa ,_eac int ;_dafd :=_afgb ;_daaf :=-1;for _daaf < len (_dbbd [_ggd ]){_cga =_cce (_dbbd [_ggd ],_daaf );_bffa =_cb (_dbbd [_ggd ],_dbbd [_ggd -1],_daaf );_eac =_cce (_dbbd [_ggd -1],_bffa );if _eac < _cga {_fcfc ,_dafd =_fda (_fcfc ,_dafd ,_ebc );
_daaf =_eac ;}else {if _b .Abs (float64 (_bffa -_cga ))> 3{_fcfc ,_dafd ,_daaf =_bcgb (_dbbd [_ggd ],_fcfc ,_dafd ,_daaf ,_cga );}else {_fcfc ,_dafd =_abf (_fcfc ,_dafd ,_cga ,_bffa );_daaf =_cga ;};};};_bbb =_ecc .appendEncodedRow (_bbb ,_fcfc ,_afgb );
if _ecc .EncodedByteAlign {_dafd =0;};_afgb =_dafd %8;};if _ecc .EndOfBlock {_fgec ,_ :=_aabc (_afgb );_bbb =_ecc .appendEncodedRow (_bbb ,_fgec ,_afgb );};return _bbb ;};func (_bae *Decoder )decodeG32D ()error {_bae ._fba =_bae ._dcb ;_bae ._ade ,_bae ._cea =_bae ._cea ,_bae ._ade ;
_gad :=true ;var (_cffb bool ;_ddbc int ;_efc error ;);_bae ._dcb =0;_ceaf :for _ddbc < _bae ._acdg {_gbb :=_bg ._gfaa ;for {_cffb ,_efc =_bae ._eaf .ReadBool ();if _efc !=nil {return _efc ;};_gbb =_gbb .walk (_cffb );if _gbb ==nil {continue _ceaf ;};if !_gbb ._dfc {continue ;
};switch _gbb ._dde {case _fg :var _bfg int ;if _gad {_bfg ,_efc =_bae .decodeRun (_e );}else {_bfg ,_efc =_bae .decodeRun (_f );};if _efc !=nil {return _efc ;};_ddbc +=_bfg ;_bae ._ade [_bae ._dcb ]=_ddbc ;_bae ._dcb ++;if _gad {_bfg ,_efc =_bae .decodeRun (_f );
}else {_bfg ,_efc =_bae .decodeRun (_e );};if _efc !=nil {return _efc ;};_ddbc +=_bfg ;_bae ._ade [_bae ._dcb ]=_ddbc ;_bae ._dcb ++;case _g :_bfa :=_bae .getNextChangingElement (_ddbc ,_gad )+1;if _bfa >=_bae ._fba {_ddbc =_bae ._acdg ;}else {_ddbc =_bae ._cea [_bfa ];
};default:_fed :=_bae .getNextChangingElement (_ddbc ,_gad );if _fed >=_bae ._fba ||_fed ==-1{_ddbc =_bae ._acdg +_gbb ._dde ;}else {_ddbc =_bae ._cea [_fed ]+_gbb ._dde ;};_bae ._ade [_bae ._dcb ]=_ddbc ;_bae ._dcb ++;_gad =!_gad ;};continue _ceaf ;};
};return nil ;};func init (){_dd =make (map[int ]code );_dd [0]=code {Code :13<<8|3<<6,BitsWritten :10};_dd [1]=code {Code :2<<(5+8),BitsWritten :3};_dd [2]=code {Code :3<<(6+8),BitsWritten :2};_dd [3]=code {Code :2<<(6+8),BitsWritten :2};_dd [4]=code {Code :3<<(5+8),BitsWritten :3};
_dd [5]=code {Code :3<<(4+8),BitsWritten :4};_dd [6]=code {Code :2<<(4+8),BitsWritten :4};_dd [7]=code {Code :3<<(3+8),BitsWritten :5};_dd [8]=code {Code :5<<(2+8),BitsWritten :6};_dd [9]=code {Code :4<<(2+8),BitsWritten :6};_dd [10]=code {Code :4<<(1+8),BitsWritten :7};
_dd [11]=code {Code :5<<(1+8),BitsWritten :7};_dd [12]=code {Code :7<<(1+8),BitsWritten :7};_dd [13]=code {Code :4<<8,BitsWritten :8};_dd [14]=code {Code :7<<8,BitsWritten :8};_dd [15]=code {Code :12<<8,BitsWritten :9};_dd [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_dd [17]=code {Code :6<<8,BitsWritten :10};_dd [18]=code {Code :2<<8,BitsWritten :10};_dd [19]=code {Code :12<<8|7<<5,BitsWritten :11};_dd [20]=code {Code :13<<8,BitsWritten :11};_dd [21]=code {Code :13<<8|4<<5,BitsWritten :11};_dd [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_dd [23]=code {Code :5<<8,BitsWritten :11};_dd [24]=code {Code :2<<8|7<<5,BitsWritten :11};_dd [25]=code {Code :3<<8,BitsWritten :11};_dd [26]=code {Code :12<<8|10<<4,BitsWritten :12};_dd [27]=code {Code :12<<8|11<<4,BitsWritten :12};_dd [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_dd [29]=code {Code :12<<8|13<<4,BitsWritten :12};_dd [30]=code {Code :6<<8|8<<4,BitsWritten :12};_dd [31]=code {Code :6<<8|9<<4,BitsWritten :12};_dd [32]=code {Code :6<<8|10<<4,BitsWritten :12};_dd [33]=code {Code :6<<8|11<<4,BitsWritten :12};_dd [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_dd [35]=code {Code :13<<8|3<<4,BitsWritten :12};_dd [36]=code {Code :13<<8|4<<4,BitsWritten :12};_dd [37]=code {Code :13<<8|5<<4,BitsWritten :12};_dd [38]=code {Code :13<<8|6<<4,BitsWritten :12};_dd [39]=code {Code :13<<8|7<<4,BitsWritten :12};_dd [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_dd [41]=code {Code :6<<8|13<<4,BitsWritten :12};_dd [42]=code {Code :13<<8|10<<4,BitsWritten :12};_dd [43]=code {Code :13<<8|11<<4,BitsWritten :12};_dd [44]=code {Code :5<<8|4<<4,BitsWritten :12};_dd [45]=code {Code :5<<8|5<<4,BitsWritten :12};_dd [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_dd [47]=code {Code :5<<8|7<<4,BitsWritten :12};_dd [48]=code {Code :6<<8|4<<4,BitsWritten :12};_dd [49]=code {Code :6<<8|5<<4,BitsWritten :12};_dd [50]=code {Code :5<<8|2<<4,BitsWritten :12};_dd [51]=code {Code :5<<8|3<<4,BitsWritten :12};_dd [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_dd [53]=code {Code :3<<8|7<<4,BitsWritten :12};_dd [54]=code {Code :3<<8|8<<4,BitsWritten :12};_dd [55]=code {Code :2<<8|7<<4,BitsWritten :12};_dd [56]=code {Code :2<<8|8<<4,BitsWritten :12};_dd [57]=code {Code :5<<8|8<<4,BitsWritten :12};_dd [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_dd [59]=code {Code :2<<8|11<<4,BitsWritten :12};_dd [60]=code {Code :2<<8|12<<4,BitsWritten :12};_dd [61]=code {Code :5<<8|10<<4,BitsWritten :12};_dd [62]=code {Code :6<<8|6<<4,BitsWritten :12};_dd [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ddf =make (map[int ]code );
_ddf [0]=code {Code :53<<8,BitsWritten :8};_ddf [1]=code {Code :7<<(2+8),BitsWritten :6};_ddf [2]=code {Code :7<<(4+8),BitsWritten :4};_ddf [3]=code {Code :8<<(4+8),BitsWritten :4};_ddf [4]=code {Code :11<<(4+8),BitsWritten :4};_ddf [5]=code {Code :12<<(4+8),BitsWritten :4};
_ddf [6]=code {Code :14<<(4+8),BitsWritten :4};_ddf [7]=code {Code :15<<(4+8),BitsWritten :4};_ddf [8]=code {Code :19<<(3+8),BitsWritten :5};_ddf [9]=code {Code :20<<(3+8),BitsWritten :5};_ddf [10]=code {Code :7<<(3+8),BitsWritten :5};_ddf [11]=code {Code :8<<(3+8),BitsWritten :5};
_ddf [12]=code {Code :8<<(2+8),BitsWritten :6};_ddf [13]=code {Code :3<<(2+8),BitsWritten :6};_ddf [14]=code {Code :52<<(2+8),BitsWritten :6};_ddf [15]=code {Code :53<<(2+8),BitsWritten :6};_ddf [16]=code {Code :42<<(2+8),BitsWritten :6};_ddf [17]=code {Code :43<<(2+8),BitsWritten :6};
_ddf [18]=code {Code :39<<(1+8),BitsWritten :7};_ddf [19]=code {Code :12<<(1+8),BitsWritten :7};_ddf [20]=code {Code :8<<(1+8),BitsWritten :7};_ddf [21]=code {Code :23<<(1+8),BitsWritten :7};_ddf [22]=code {Code :3<<(1+8),BitsWritten :7};_ddf [23]=code {Code :4<<(1+8),BitsWritten :7};
_ddf [24]=code {Code :40<<(1+8),BitsWritten :7};_ddf [25]=code {Code :43<<(1+8),BitsWritten :7};_ddf [26]=code {Code :19<<(1+8),BitsWritten :7};_ddf [27]=code {Code :36<<(1+8),BitsWritten :7};_ddf [28]=code {Code :24<<(1+8),BitsWritten :7};_ddf [29]=code {Code :2<<8,BitsWritten :8};
_ddf [30]=code {Code :3<<8,BitsWritten :8};_ddf [31]=code {Code :26<<8,BitsWritten :8};_ddf [32]=code {Code :27<<8,BitsWritten :8};_ddf [33]=code {Code :18<<8,BitsWritten :8};_ddf [34]=code {Code :19<<8,BitsWritten :8};_ddf [35]=code {Code :20<<8,BitsWritten :8};
_ddf [36]=code {Code :21<<8,BitsWritten :8};_ddf [37]=code {Code :22<<8,BitsWritten :8};_ddf [38]=code {Code :23<<8,BitsWritten :8};_ddf [39]=code {Code :40<<8,BitsWritten :8};_ddf [40]=code {Code :41<<8,BitsWritten :8};_ddf [41]=code {Code :42<<8,BitsWritten :8};
_ddf [42]=code {Code :43<<8,BitsWritten :8};_ddf [43]=code {Code :44<<8,BitsWritten :8};_ddf [44]=code {Code :45<<8,BitsWritten :8};_ddf [45]=code {Code :4<<8,BitsWritten :8};_ddf [46]=code {Code :5<<8,BitsWritten :8};_ddf [47]=code {Code :10<<8,BitsWritten :8};
_ddf [48]=code {Code :11<<8,BitsWritten :8};_ddf [49]=code {Code :82<<8,BitsWritten :8};_ddf [50]=code {Code :83<<8,BitsWritten :8};_ddf [51]=code {Code :84<<8,BitsWritten :8};_ddf [52]=code {Code :85<<8,BitsWritten :8};_ddf [53]=code {Code :36<<8,BitsWritten :8};
_ddf [54]=code {Code :37<<8,BitsWritten :8};_ddf [55]=code {Code :88<<8,BitsWritten :8};_ddf [56]=code {Code :89<<8,BitsWritten :8};_ddf [57]=code {Code :90<<8,BitsWritten :8};_ddf [58]=code {Code :91<<8,BitsWritten :8};_ddf [59]=code {Code :74<<8,BitsWritten :8};
_ddf [60]=code {Code :75<<8,BitsWritten :8};_ddf [61]=code {Code :50<<8,BitsWritten :8};_ddf [62]=code {Code :51<<8,BitsWritten :8};_ddf [63]=code {Code :52<<8,BitsWritten :8};_ae =make (map[int ]code );_ae [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ae [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_ae [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ae [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ae [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ae [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ae [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ae [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_ae [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ae [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ae [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ae [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ae [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ae [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_ae [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ae [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ae [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ae [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ae [1216]=code {Code :119<<3,BitsWritten :13};_ae [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_ae [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ae [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ae [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ae [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ae [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_ae [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ae [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ef =make (map[int ]code );_ef [64]=code {Code :27<<(3+8),BitsWritten :5};_ef [128]=code {Code :18<<(3+8),BitsWritten :5};_ef [192]=code {Code :23<<(2+8),BitsWritten :6};
_ef [256]=code {Code :55<<(1+8),BitsWritten :7};_ef [320]=code {Code :54<<8,BitsWritten :8};_ef [384]=code {Code :55<<8,BitsWritten :8};_ef [448]=code {Code :100<<8,BitsWritten :8};_ef [512]=code {Code :101<<8,BitsWritten :8};_ef [576]=code {Code :104<<8,BitsWritten :8};
_ef [640]=code {Code :103<<8,BitsWritten :8};_ef [704]=code {Code :102<<8,BitsWritten :9};_ef [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ef [832]=code {Code :105<<8,BitsWritten :9};_ef [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ef [960]=code {Code :106<<8,BitsWritten :9};
_ef [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ef [1088]=code {Code :107<<8,BitsWritten :9};_ef [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ef [1216]=code {Code :108<<8,BitsWritten :9};_ef [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ef [1344]=code {Code :109<<8,BitsWritten :9};
_ef [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ef [1472]=code {Code :76<<8,BitsWritten :9};_ef [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ef [1600]=code {Code :77<<8,BitsWritten :9};_ef [1664]=code {Code :24<<(2+8),BitsWritten :6};_ef [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_ced =make (map[int ]code );_ced [1792]=code {Code :1<<8,BitsWritten :11};_ced [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ced [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ced [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ced [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_ced [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ced [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ced [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ced [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ced [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_ced [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ced [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ced [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_gb =make (map[int ]byte );_gb [0]=0xFF;_gb [1]=0xFE;_gb [2]=0xFC;_gb [3]=0xF8;_gb [4]=0xF0;_gb [5]=0xE0;
_gb [6]=0xC0;_gb [7]=0x80;_gb [8]=0x00;};var (_dd map[int ]code ;_ddf map[int ]code ;_ae map[int ]code ;_ef map[int ]code ;_ced map[int ]code ;_gb map[int ]byte ;_aa =code {Code :1<<4,BitsWritten :12};_gag =code {Code :3<<3,BitsWritten :13};_gc =code {Code :2<<3,BitsWritten :13};
_ebc =code {Code :1<<12,BitsWritten :4};_ee =code {Code :1<<13,BitsWritten :3};_bcge =code {Code :1<<15,BitsWritten :1};_gda =code {Code :3<<13,BitsWritten :3};_ddb =code {Code :3<<10,BitsWritten :6};_ed =code {Code :3<<9,BitsWritten :7};_cca =code {Code :2<<13,BitsWritten :3};
_acg =code {Code :2<<10,BitsWritten :6};_afd =code {Code :2<<9,BitsWritten :7};);func _fce (_adda []byte ,_dgg int ,_bfeb code )([]byte ,int ){_eef :=true ;var _ceaa []byte ;_ceaa ,_dgg =_fda (nil ,_dgg ,_bfeb );_cec :=0;var _fea int ;for _cec < len (_adda ){_fea ,_cec =_ceg (_adda ,_eef ,_cec );
_ceaa ,_dgg =_bef (_ceaa ,_dgg ,_fea ,_eef );_eef =!_eef ;};return _ceaa ,_dgg %8;};var (_ddgd byte =1;_gae byte =0;);func (_eacc *tree )fill (_egcc ,_fgbc ,_ggc int )error {_aaef :=_eacc ._gfaa ;for _ffa :=0;_ffa < _egcc ;_ffa ++{_aca :=_egcc -1-_ffa ;
_bgb :=((_fgbc >>uint (_aca ))&1)!=0;_dbbc :=_aaef .walk (_bgb );if _dbbc !=nil {if _dbbc ._dfc {return _db .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_aaef =_dbbc ;continue ;};_dbbc =&treeNode {};if _ffa ==_egcc -1{_dbbc ._dde =_ggc ;_dbbc ._dfc =true ;};if _fgbc ==0{_dbbc ._dea =true ;};_aaef .set (_bgb ,_dbbc );_aaef =_dbbc ;};return nil ;};func _bcgb (_eea ,_gbce []byte ,_ead ,_abe ,_fcb int )([]byte ,int ,int ){_gde :=_cce (_eea ,_fcb );
_dbcg :=_abe >=0&&_eea [_abe ]==_ddgd ||_abe ==-1;_gbce ,_ead =_fda (_gbce ,_ead ,_ee );var _ccgf int ;if _abe > -1{_ccgf =_fcb -_abe ;}else {_ccgf =_fcb -_abe -1;};_gbce ,_ead =_bef (_gbce ,_ead ,_ccgf ,_dbcg );_dbcg =!_dbcg ;_dac :=_gde -_fcb ;_gbce ,_ead =_bef (_gbce ,_ead ,_dac ,_dbcg );
_abe =_gde ;return _gbce ,_ead ,_abe ;};func _ccae (_fga []byte ,_dcad int )([]byte ,int ){return _fda (_fga ,_dcad ,_ebc )};func _bfb (_dddff ,_gdgb []byte ,_gfc int ,_cfec bool )int {_cffd :=_cce (_gdgb ,_gfc );if _cffd < len (_gdgb )&&(_gfc ==-1&&_gdgb [_cffd ]==_ddgd ||_gfc >=0&&_gfc < len (_dddff )&&_dddff [_gfc ]==_gdgb [_cffd ]||_gfc >=len (_dddff )&&_cfec &&_gdgb [_cffd ]==_ddgd ||_gfc >=len (_dddff )&&!_cfec &&_gdgb [_cffd ]==_gae ){_cffd =_cce (_gdgb ,_cffd );
};return _cffd ;};func _agf (_ddcg ,_ffc int )code {var _bcde code ;switch _ffc -_ddcg {case -1:_bcde =_gda ;case -2:_bcde =_ddb ;case -3:_bcde =_ed ;case 0:_bcde =_bcge ;case 1:_bcde =_cca ;case 2:_bcde =_acg ;case 3:_bcde =_afd ;};return _bcde ;};func (_aeef *Decoder )decodeRowType4 ()error {if !_aeef ._ff {return _aeef .decoderRowType41D ();
};if _aeef ._bcaf {_aeef ._eaf .Align ();};_aeef ._eaf .Mark ();_bb ,_eafc :=_aeef .tryFetchEOL ();if _eafc !=nil {return _eafc ;};if !_bb &&_aeef ._ddc {_aeef ._ebb ++;if _aeef ._ebb > _aeef ._aee {return _ebcb ;};_aeef ._eaf .Reset ();};if !_bb {_aeef ._eaf .Reset ();
};_dg ,_eafc :=_aeef ._eaf .ReadBool ();if _eafc !=nil {return _eafc ;};if _dg {if _bb &&_aeef ._bca {if _eafc =_aeef .tryFetchRTC2D ();_eafc !=nil {return _eafc ;};};_eafc =_aeef .decode1D ();}else {_eafc =_aeef .decode2D ();};if _eafc !=nil {return _eafc ;
};return nil ;};type Decoder struct{_acdg int ;_fe int ;_afdb int ;_gbe []byte ;_aee int ;_ff bool ;_fbf bool ;_daae bool ;_dag bool ;_ddc bool ;_bca bool ;_bcaf bool ;_gdc int ;_ea int ;_cea []int ;_ade []int ;_fba int ;_dcb int ;_ebb int ;_ccd int ;_eaf *_cc .Reader ;
_dbg tiffType ;_bf error ;};func (_ecag *tree )fillWithNode (_ccc ,_ffb int ,_badc *treeNode )error {_feg :=_ecag ._gfaa ;for _fece :=0;_fece < _ccc ;_fece ++{_bce :=uint (_ccc -1-_fece );_adec :=((_ffb >>_bce )&1)!=0;_eeec :=_feg .walk (_adec );if _eeec !=nil {if _eeec ._dfc {return _db .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_feg =_eeec ;continue ;};if _fece ==_ccc -1{_eeec =_badc ;}else {_eeec =&treeNode {};};if _ffb ==0{_eeec ._dea =true ;};_feg .set (_adec ,_eeec );_feg =_eeec ;};return nil ;};func _abf (_bfd []byte ,_gfcb ,_cef ,_cbb int )([]byte ,int ){_efa :=_agf (_cef ,_cbb );
_bfd ,_gfcb =_fda (_bfd ,_gfcb ,_efa );return _bfd ,_gfcb ;};var _add =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_badf *Decoder )decodeRun (_fc *tree )(int ,error ){var _cad int ;_dddf :=_fc ._gfaa ;for {_aeg ,_age :=_badf ._eaf .ReadBool ();if _age !=nil {return 0,_age ;};_dddf =_dddf .walk (_aeg );if _dddf ==nil {return 0,_db .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _dddf ._dfc {_cad +=_dddf ._dde ;switch {case _dddf ._dde >=64:_dddf =_fc ._gfaa ;case _dddf ._dde >=0:return _cad ,nil ;default:return _badf ._acdg ,nil ;};};};};func (_fbac *Encoder )appendEncodedRow (_cedc ,_ffec []byte ,_cde int )[]byte {if len (_cedc )> 0&&_cde !=0&&!_fbac .EncodedByteAlign {_cedc [len (_cedc )-1]=_cedc [len (_cedc )-1]|_ffec [0];
_cedc =append (_cedc ,_ffec [1:]...);}else {_cedc =append (_cedc ,_ffec ...);};return _cedc ;};func (_deb tiffType )String ()string {switch _deb {case _fa :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _bda :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _eg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_gfd *Decoder )fetch ()error {if _gfd ._gdc ==-1{return nil ;
};if _gfd ._ea < _gfd ._gdc {return nil ;};_gfd ._gdc =0;_ddg :=_gfd .decodeRow ();if _ddg !=nil {if !_db .Is (_ddg ,_c .EOF ){return _ddg ;};if _gfd ._gdc !=0{return _ddg ;};_gfd ._gdc =-1;};_gfd ._ea =0;return nil ;};type DecodeOptions struct{Columns int ;
Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};var _aga =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_egbc *treeNode )walk (_gaa bool )*treeNode {if _gaa {return _egbc ._abd ;};return _egbc ._cafd ;};func (_fad *Decoder )tryFetchRTC2D ()(_dcgd error ){_fad ._eaf .Mark ();var _fbdb bool ;for _aab :=0;_aab < 5;_aab ++{_fbdb ,_dcgd =_fad .tryFetchEOL1 ();
if _dcgd !=nil {if _db .Is (_dcgd ,_c .EOF ){if _aab ==0{break ;};return _egb ;};};if _fbdb {continue ;};if _aab > 0{return _egb ;};break ;};if _fbdb {return _c .EOF ;};_fad ._eaf .Reset ();return _dcgd ;};func _gbee (_eaaa [][]byte )[][]byte {_cfg :=make ([]byte ,len (_eaaa [0]));
for _gadb :=range _cfg {_cfg [_gadb ]=_ddgd ;};_eaaa =append (_eaaa ,[]byte {});for _dec :=len (_eaaa )-1;_dec > 0;_dec --{_eaaa [_dec ]=_eaaa [_dec -1];};_eaaa [0]=_cfg ;return _eaaa ;};func (_cee *Encoder )encodeG31D (_dcfa [][]byte )[]byte {var _fgb []byte ;
_cfff :=0;for _gagd :=range _dcfa {if _cee .Rows > 0&&!_cee .EndOfBlock &&_gagd ==_cee .Rows {break ;};_eab ,_cfc :=_fce (_dcfa [_gagd ],_cfff ,_aa );_fgb =_cee .appendEncodedRow (_fgb ,_eab ,_cfff );if _cee .EncodedByteAlign {_cfc =0;};_cfff =_cfc ;};
if _cee .EndOfBlock {_ddbdc ,_ :=_feb (_cfff );_fgb =_cee .appendEncodedRow (_fgb ,_ddbdc ,_cfff );};return _fgb ;};func _feb (_eaa int )([]byte ,int ){var _bgc []byte ;for _agae :=0;_agae < 6;_agae ++{_bgc ,_eaa =_fda (_bgc ,_eaa ,_aa );};return _bgc ,_eaa %8;
};func (_bfgf *Decoder )getNextChangingElement (_fec int ,_aad bool )int {_bdg :=0;if !_aad {_bdg =1;};_fdf :=int (uint32 (_bfgf ._ccd )&0xFFFFFFFE)+_bdg ;if _fdf > 2{_fdf -=2;};if _fec ==0{return _fdf ;};for _acb :=_fdf ;_acb < _bfgf ._fba ;_acb +=2{if _fec < _bfgf ._cea [_acb ]{_bfgf ._ccd =_acb ;
return _acb ;};};return -1;};func (_gcg *Decoder )decodeRow ()(_bcb error ){if !_gcg ._bca &&_gcg ._fe > 0&&_gcg ._fe ==_gcg ._afdb {return _c .EOF ;};switch _gcg ._dbg {case _fa :_bcb =_gcg .decodeRowType2 ();case _bda :_bcb =_gcg .decodeRowType4 ();case _eg :_bcb =_gcg .decodeRowType6 ();
};if _bcb !=nil {return _bcb ;};_adf :=0;_afg :=true ;_gcg ._ccd =0;for _cg :=0;_cg < _gcg ._dcb ;_cg ++{_ab :=_gcg ._acdg ;if _cg !=_gcg ._dcb {_ab =_gcg ._ade [_cg ];};if _ab > _gcg ._acdg {_ab =_gcg ._acdg ;};_bdad :=_adf /8;for _adf %8!=0&&_ab -_adf > 0{var _gg byte ;
if !_afg {_gg =1<<uint (7-(_adf %8));};_gcg ._gbe [_bdad ]|=_gg ;_adf ++;};if _adf %8==0{_bdad =_adf /8;var _dca byte ;if !_afg {_dca =0xff;};for _ab -_adf > 7{_gcg ._gbe [_bdad ]=_dca ;_adf +=8;_bdad ++;};};for _ab -_adf > 0{if _adf %8==0{_gcg ._gbe [_bdad ]=0;
};var _gfa byte ;if !_afg {_gfa =1<<uint (7-(_adf %8));};_gcg ._gbe [_bdad ]|=_gfa ;_adf ++;};_afg =!_afg ;};if _adf !=_gcg ._acdg {return _db .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gcg ._gdc =(_adf +7)/8;_gcg ._afdb ++;return nil ;};func _bef (_eca []byte ,_aed int ,_fade int ,_dge bool )([]byte ,int ){var (_fceg code ;_fae bool ;);for !_fae {_fceg ,_fade ,_fae =_aae (_fade ,_dge );_eca ,_aed =_fda (_eca ,_aed ,_fceg );};return _eca ,_aed ;
};func _cce (_dee []byte ,_gcgg int )int {if _gcgg >=len (_dee ){return _gcgg ;};if _gcgg < -1{_gcgg =-1;};var _daee byte ;if _gcgg > -1{_daee =_dee [_gcgg ];}else {_daee =_ddgd ;};_dgd :=_gcgg +1;for _dgd < len (_dee ){if _dee [_dgd ]!=_daee {break ;};
_dgd ++;};return _dgd ;};func _eafd (_egc int )([]byte ,int ){var _fee []byte ;for _eccb :=0;_eccb < 6;_eccb ++{_fee ,_egc =_fda (_fee ,_egc ,_gag );};return _fee ,_egc %8;};type tree struct{_gfaa *treeNode };type code struct{Code uint16 ;BitsWritten int ;
};func (_daf *Decoder )looseFetchEOL ()(bool ,error ){_dafg ,_ggb :=_daf ._eaf .ReadBits (12);if _ggb !=nil {return false ,_ggb ;};switch _dafg {case 0x1:return true ,nil ;case 0x0:for {_bfe ,_bbg :=_daf ._eaf .ReadBool ();if _bbg !=nil {return false ,_bbg ;
};if _bfe {return true ,nil ;};};default:return false ,nil ;};};func (_edf *Decoder )decode2D ()error {_edf ._fba =_edf ._dcb ;_edf ._ade ,_edf ._cea =_edf ._cea ,_edf ._ade ;_ca :=true ;var (_dff bool ;_aef int ;_eee error ;);_edf ._dcb =0;_gdd :for _aef < _edf ._acdg {_bdf :=_bg ._gfaa ;
for {_dff ,_eee =_edf ._eaf .ReadBool ();if _eee !=nil {return _eee ;};_bdf =_bdf .walk (_dff );if _bdf ==nil {continue _gdd ;};if !_bdf ._dfc {continue ;};switch _bdf ._dde {case _fg :var _bdc int ;if _ca {_bdc ,_eee =_edf .decodeRun (_e );}else {_bdc ,_eee =_edf .decodeRun (_f );
};if _eee !=nil {return _eee ;};_aef +=_bdc ;_edf ._ade [_edf ._dcb ]=_aef ;_edf ._dcb ++;if _ca {_bdc ,_eee =_edf .decodeRun (_f );}else {_bdc ,_eee =_edf .decodeRun (_e );};if _eee !=nil {return _eee ;};_aef +=_bdc ;_edf ._ade [_edf ._dcb ]=_aef ;_edf ._dcb ++;
case _g :_cgd :=_edf .getNextChangingElement (_aef ,_ca )+1;if _cgd >=_edf ._fba {_aef =_edf ._acdg ;}else {_aef =_edf ._cea [_cgd ];};default:_gdaa :=_edf .getNextChangingElement (_aef ,_ca );if _gdaa >=_edf ._fba ||_gdaa ==-1{_aef =_edf ._acdg +_bdf ._dde ;
}else {_aef =_edf ._cea [_gdaa ]+_bdf ._dde ;};_edf ._ade [_edf ._dcb ]=_aef ;_edf ._dcb ++;_ca =!_ca ;};continue _gdd ;};};return nil ;};func (_caf *Encoder )encodeG32D (_fge [][]byte )[]byte {var _cdd []byte ;var _fgg int ;for _be :=0;_be < len (_fge );
_be +=_caf .K {if _caf .Rows > 0&&!_caf .EndOfBlock &&_be ==_caf .Rows {break ;};_gfb ,_adb :=_fce (_fge [_be ],_fgg ,_gag );_cdd =_caf .appendEncodedRow (_cdd ,_gfb ,_fgg );if _caf .EncodedByteAlign {_adb =0;};_fgg =_adb ;for _fgc :=_be +1;_fgc < (_be +_caf .K )&&_fgc < len (_fge );
_fgc ++{if _caf .Rows > 0&&!_caf .EndOfBlock &&_fgc ==_caf .Rows {break ;};_fcf ,_bdb :=_fda (nil ,_fgg ,_gc );var _edc ,_daeg ,_bdcf int ;_dbc :=-1;for _dbc < len (_fge [_fgc ]){_edc =_cce (_fge [_fgc ],_dbc );_daeg =_cb (_fge [_fgc ],_fge [_fgc -1],_dbc );
_bdcf =_cce (_fge [_fgc -1],_daeg );if _bdcf < _edc {_fcf ,_bdb =_ccae (_fcf ,_bdb );_dbc =_bdcf ;}else {if _b .Abs (float64 (_daeg -_edc ))> 3{_fcf ,_bdb ,_dbc =_bcgb (_fge [_fgc ],_fcf ,_bdb ,_dbc ,_edc );}else {_fcf ,_bdb =_abf (_fcf ,_bdb ,_edc ,_daeg );
_dbc =_edc ;};};};_cdd =_caf .appendEncodedRow (_cdd ,_fcf ,_fgg );if _caf .EncodedByteAlign {_bdb =0;};_fgg =_bdb %8;};};if _caf .EndOfBlock {_bee ,_ :=_eafd (_fgg );_cdd =_caf .appendEncodedRow (_cdd ,_bee ,_fgg );};return _cdd ;};const (_ tiffType =iota ;
_fa ;_bda ;_eg ;);func (_gcab *Decoder )decodeRowType2 ()error {if _gcab ._bcaf {_gcab ._eaf .Align ();};if _aba :=_gcab .decode1D ();_aba !=nil {return _aba ;};return nil ;};func (_ffe *Decoder )tryFetchEOL ()(bool ,error ){_dbe ,_ddbd :=_ffe ._eaf .ReadBits (12);
if _ddbd !=nil {return false ,_ddbd ;};return _dbe ==0x1,nil ;};func _aae (_gcd int ,_degb bool )(code ,int ,bool ){if _gcd < 64{if _degb {return _ddf [_gcd ],0,true ;};return _dd [_gcd ],0,true ;};_ecad :=_gcd /64;if _ecad > 40{return _ced [2560],_gcd -2560,false ;
};if _ecad > 27{return _ced [_ecad *64],_gcd -_ecad *64,false ;};if _degb {return _ef [_ecad *64],_gcd -_ecad *64,false ;};return _ae [_ecad *64],_gcd -_ecad *64,false ;};func _aabc (_aea int )([]byte ,int ){var _dbfg []byte ;for _eeb :=0;_eeb < 2;_eeb ++{_dbfg ,_aea =_fda (_dbfg ,_aea ,_aa );
};return _dbfg ,_aea %8;};func (_bff *Encoder )Encode (pixels [][]byte )[]byte {if _bff .BlackIs1 {_ddgd =0;_gae =1;}else {_ddgd =1;_gae =0;};if _bff .K ==0{return _bff .encodeG31D (pixels );};if _bff .K > 0{return _bff .encodeG32D (pixels );};if _bff .K < 0{return _bff .encodeG4 (pixels );
};return nil ;};func (_ggba *treeNode )set (_feae bool ,_ffce *treeNode ){if !_feae {_ggba ._cafd =_ffce ;}else {_ggba ._abd =_ffce ;};};func _cb (_bbbe ,_badd []byte ,_eafa int )int {_debg :=_cce (_badd ,_eafa );if _debg < len (_badd )&&(_eafa ==-1&&_badd [_debg ]==_ddgd ||_eafa >=0&&_eafa < len (_bbbe )&&_bbbe [_eafa ]==_badd [_debg ]||_eafa >=len (_bbbe )&&_bbbe [_eafa -1]!=_badd [_debg ]){_debg =_cce (_badd ,_debg );
};return _debg ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_dcf *Decoder )decoderRowType41D ()error {if _dcf ._bcaf {_dcf ._eaf .Align ();
};_dcf ._eaf .Mark ();var (_fbd bool ;_cgb error ;);if _dcf ._ddc {_fbd ,_cgb =_dcf .tryFetchEOL ();if _cgb !=nil {return _cgb ;};if !_fbd {return _ebcb ;};}else {_fbd ,_cgb =_dcf .looseFetchEOL ();if _cgb !=nil {return _cgb ;};};if !_fbd {_dcf ._eaf .Reset ();
};if _fbd &&_dcf ._bca {_dcf ._eaf .Mark ();for _dga :=0;_dga < 5;_dga ++{_fbd ,_cgb =_dcf .tryFetchEOL ();if _cgb !=nil {if _db .Is (_cgb ,_c .EOF ){if _dga ==0{break ;};return _egb ;};};if _fbd {continue ;};if _dga > 0{return _egb ;};break ;};if _fbd {return _c .EOF ;
};_dcf ._eaf .Reset ();};if _cgb =_dcf .decode1D ();_cgb !=nil {return _cgb ;};return nil ;};type tiffType int ;var _bd =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_dbd *Decoder )decode1D ()error {var (_gbc int ;_bcgf error ;);_agd :=true ;_dbd ._dcb =0;for {var _eec int ;if _agd {_eec ,_bcgf =_dbd .decodeRun (_e );}else {_eec ,_bcgf =_dbd .decodeRun (_f );};if _bcgf !=nil {return _bcgf ;};_gbc +=_eec ;_dbd ._ade [_dbd ._dcb ]=_gbc ;
_dbd ._dcb ++;_agd =!_agd ;if _gbc >=_dbd ._acdg {break ;};};return nil ;};var (_egb =_db .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ebcb =_db .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);type treeNode struct{_cafd *treeNode ;_abd *treeNode ;_dde int ;_dea bool ;_dfc bool ;};var _gd =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gca :=&Decoder {_eaf :_cc .NewReader (data ),_acdg :options .Columns ,_fe :options .Rows ,_aee :options .DamagedRowsBeforeError ,_gbe :make ([]byte ,(options .Columns +7)/8),_cea :make ([]int ,options .Columns +2),_ade :make ([]int ,options .Columns +2),_bcaf :options .EncodedByteAligned ,_dag :options .BlackIsOne ,_ddc :options .EndOfLine ,_bca :options .EndOfBlock };
switch {case options .K ==0:_gca ._dbg =_bda ;if len (data )< 20{return nil ,_db .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_bad :=data [:20];if _bad [0]!=0||(_bad [1]>>4!=1&&_bad [1]!=1){_gca ._dbg =_fa ;
_dcd :=(uint16 (_bad [0])<<8+uint16 (_bad [1]&0xff))>>4;for _daac :=12;_daac < 160;_daac ++{_dcd =(_dcd <<1)+uint16 ((_bad [_daac /8]>>uint16 (7-(_daac %8)))&0x01);if _dcd &0xfff==1{_gca ._dbg =_bda ;break ;};};};case options .K < 0:_gca ._dbg =_eg ;case options .K > 0:_gca ._dbg =_bda ;
_gca ._ff =true ;};switch _gca ._dbg {case _fa ,_bda ,_eg :default:return nil ,_db .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gca ,nil ;};func (_gdg *Decoder )Read (in []byte )(int ,error ){if _gdg ._bf !=nil {return 0,_gdg ._bf ;};_edd :=len (in );var (_cd int ;_cfe int ;);for _edd !=0{if _gdg ._ea >=_gdg ._gdc {if _dbb :=_gdg .fetch ();_dbb !=nil {_gdg ._bf =_dbb ;
return 0,_dbb ;};};if _gdg ._gdc ==-1{return _cd ,_c .EOF ;};switch {case _edd <=_gdg ._gdc -_gdg ._ea :_deg :=_gdg ._gbe [_gdg ._ea :_gdg ._ea +_edd ];for _ ,_cff :=range _deg {if !_gdg ._dag {_cff =^_cff ;};in [_cfe ]=_cff ;_cfe ++;};_cd +=len (_deg );
_gdg ._ea +=len (_deg );return _cd ,nil ;default:_gfe :=_gdg ._gbe [_gdg ._ea :];for _ ,_gce :=range _gfe {if !_gdg ._dag {_gce =^_gce ;};in [_cfe ]=_gce ;_cfe ++;};_cd +=len (_gfe );_gdg ._ea +=len (_gfe );_edd -=len (_gfe );};};return _cd ,nil ;};