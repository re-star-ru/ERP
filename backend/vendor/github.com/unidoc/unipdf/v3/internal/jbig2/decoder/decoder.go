//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_d "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_de "github.com/unidoc/unipdf/v3/internal/jbig2/document";_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_b "image";
);func (_db *Decoder )decodePageImage (_dcc int )(_b .Image ,error ){const _gae ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _dcc < 0{return nil ,_e .Errorf (_gae ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dcc );
};if _dcc > int (_db ._ef .NumberOfPages ){return nil ,_e .Errorf (_gae ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dcc );
};_bf ,_df :=_db ._ef .GetPage (_dcc );if _df !=nil {return nil ,_e .Wrap (_df ,_gae ,"");};_gf ,_df :=_bf .GetBitmap ();if _df !=nil {return nil ,_e .Wrap (_df ,_gae ,"");};_gf .InverseData ();return _gf .ToImage (),nil ;};type Decoder struct{_a _d .StreamReader ;
_ef *_de .Document ;_ca int ;_fe Parameters ;};func (_ee *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ee .decodePage (pageNumber )};func (_cac *Decoder )DecodePageImage (pageNumber int )(_b .Image ,error ){const _ce ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_g ,_cg :=_cac .decodePageImage (pageNumber );if _cg !=nil {return nil ,_e .Wrap (_cg ,_ce ,"");};return _g ,nil ;};func (_aa *Decoder )DecodeNextPage ()([]byte ,error ){_aa ._ca ++;_cc :=_aa ._ca ;return _aa .decodePage (_cc );};func Decode (input []byte ,parameters Parameters ,globals *_de .Globals )(*Decoder ,error ){_bg :=_d .NewReader (input );
_dec ,_dd :=_de .DecodeDocument (_bg ,globals );if _dd !=nil {return nil ,_dd ;};return &Decoder {_a :_bg ,_ef :_dec ,_fe :parameters },nil ;};func (_fef *Decoder )PageNumber ()(int ,error ){const _bd ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _fef ._ef ==nil {return 0,_e .Error (_bd ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_fef ._ef .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;
Color _f .Color ;};func (_ae *Decoder )decodePage (_dg int )([]byte ,error ){const _ba ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _dg < 0{return nil ,_e .Errorf (_ba ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dg );
};if _dg > int (_ae ._ef .NumberOfPages ){return nil ,_e .Errorf (_ba ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dg );
};_ga ,_ad :=_ae ._ef .GetPage (_dg );if _ad !=nil {return nil ,_e .Wrap (_ad ,_ba ,"");};_dc ,_ad :=_ga .GetBitmap ();if _ad !=nil {return nil ,_e .Wrap (_ad ,_ba ,"");};_dc .InverseData ();if !_ae ._fe .UnpaddedData {return _dc .Data ,nil ;};return _dc .GetUnpaddedData ();
};