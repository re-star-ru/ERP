//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_e "bufio";_a "bytes";_b "encoding/hex";_ee "errors";_c "fmt";_f "github.com/unidoc/unipdf/v3/common";_dc "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_bb "io";_ca "sort";_g "strconv";_cc "strings";
_cd "unicode/utf16";);type CharCode uint32 ;type cmapArray struct{Array []cmapObject ;};func (_bgdc *cMapParser )parseObject ()(cmapObject ,error ){_bgdc .skipSpaces ();for {_eca ,_dbdae :=_bgdc ._ccd .Peek (2);if _dbdae !=nil {return nil ,_dbdae ;};if _eca [0]=='%'{_bgdc .parseComment ();
_bgdc .skipSpaces ();continue ;}else if _eca [0]=='/'{_acgf ,_ecb :=_bgdc .parseName ();return _acgf ,_ecb ;}else if _eca [0]=='('{_fbc ,_adb :=_bgdc .parseString ();return _fbc ,_adb ;}else if _eca [0]=='['{_eggd ,_bdc :=_bgdc .parseArray ();return _eggd ,_bdc ;
}else if (_eca [0]=='<')&&(_eca [1]=='<'){_aefb ,_cebg :=_bgdc .parseDict ();return _aefb ,_cebg ;}else if _eca [0]=='<'{_gfc ,_dgab :=_bgdc .parseHexString ();return _gfc ,_dgab ;}else if _dc .IsDecimalDigit (_eca [0])||(_eca [0]=='-'&&_dc .IsDecimalDigit (_eca [1])){_bafg ,_defg :=_bgdc .parseNumber ();
if _defg !=nil {return nil ,_defg ;};return _bafg ,nil ;}else {_geg ,_cdbe :=_bgdc .parseOperand ();if _cdbe !=nil {return nil ,_cdbe ;};return _geg ,nil ;};};};func (cmap *CMap )parseName ()error {_eba :="";_gce :=false ;for _bgde :=0;_bgde < 20&&!_gce ;
_bgde ++{_ffg ,_aeb :=cmap .parseObject ();if _aeb !=nil {return _aeb ;};switch _ag :=_ffg .(type ){case cmapOperand :switch _ag .Operand {case "\u0064\u0065\u0066":_gce =true ;default:_f .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_ffg ,_eba );
if _eba !=""{_eba =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_eba ,_ag .Operand );};_f .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_eba );
};case cmapName :_eba =_ag .Name ;};};if !_gce {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._fg =_eba ;return nil ;};type CIDSystemInfo struct{Registry string ;
Ordering string ;Supplement int ;};func IsPredefinedCMap (name string )bool {return _de .AssetExists (name )};func (_gab *cMapParser )parseComment ()(string ,error ){var _cegg _a .Buffer ;_ ,_fbac :=_gab .skipSpaces ();if _fbac !=nil {return _cegg .String (),_fbac ;
};_ace :=true ;for {_cgc ,_beg :=_gab ._ccd .Peek (1);if _beg !=nil {_f .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_beg );return _cegg .String (),_beg ;};if _ace &&_cgc [0]!='%'{return _cegg .String (),ErrBadCMapComment ;
};_ace =false ;if (_cgc [0]!='\r')&&(_cgc [0]!='\n'){_gcd ,_ :=_gab ._ccd .ReadByte ();_cegg .WriteByte (_gcd );}else {break ;};};return _cegg .String (),nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func (cmap *CMap )parseBfrange ()error {for {var _cgd CharCode ;_gdd ,_bcf :=cmap .parseObject ();if _bcf !=nil {if _bcf ==_bb .EOF {break ;};return _bcf ;};switch _cfbe :=_gdd .(type ){case cmapOperand :if _cfbe .Operand ==_aaeg {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_cgd =_degf (_cfbe );default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cbc CharCode ;_gdd ,_bcf =cmap .parseObject ();if _bcf !=nil {if _bcf ==_bb .EOF {break ;};return _bcf ;
};switch _caeg :=_gdd .(type ){case cmapOperand :_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cbc =_degf (_caeg );if _cbc > 0xffff{_cbc =0xffff;};default:_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gdd );return ErrBadCMap ;
};_gdd ,_bcf =cmap .parseObject ();if _bcf !=nil {if _bcf ==_bb .EOF {break ;};return _bcf ;};switch _fde :=_gdd .(type ){case cmapArray :if len (_fde .Array )!=int (_cbc -_cgd )+1{_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _dfg :=_cgd ;_dfg <=_cbc ;_dfg ++{_cge :=_fde .Array [_dfg -_cgd ];_gaa ,_bfb :=_cge .(cmapHexString );if !_bfb {return _ee .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_ebe :=_fdec (_gaa );cmap ._bda [_dfg ]=string (_ebe );};case cmapHexString :_fbgg :=_fdec (_fde );_cgb :=len (_fbgg );for _cgff :=_cgd ;_cgff <=_cbc ;_cgff ++{cmap ._bda [_cgff ]=string (_fbgg );if _cgb > 0{_fbgg [_cgb -1]++;}else {_f .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cgff );
};if _cgff ==1<<32-1{break ;};};default:_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gdd );return ErrBadCMap ;};};return nil ;};func _eege (_ecf []byte )*cMapParser {_ebgc :=cMapParser {};
_ccg :=_a .NewBuffer (_ecf );_ebgc ._ccd =_e .NewReader (_ccg );return &_ebgc ;};func (cmap *CMap )toBfData ()string {if len (cmap ._bda )==0{return "";};_abf :=make ([]CharCode ,0,len (cmap ._bda ));for _cad :=range cmap ._bda {_abf =append (_abf ,_cad );
};_ca .Slice (_abf ,func (_bebc ,_ed int )bool {return _abf [_bebc ]< _abf [_ed ]});var _dbg []charRange ;_aab :=charRange {_abf [0],_abf [0]};_ddb :=cmap ._bda [_abf [0]];for _ ,_gbb :=range _abf [1:]{_efaf :=cmap ._bda [_gbb ];if _gbb ==_aab ._bd +1&&_cee (_efaf )==_cee (_ddb )+1{_aab ._bd =_gbb ;
}else {_dbg =append (_dbg ,_aab );_aab ._cb ,_aab ._bd =_gbb ,_gbb ;};_ddb =_efaf ;};_dbg =append (_dbg ,_aab );var _ece []CharCode ;var _gcf []fbRange ;for _ ,_gbbf :=range _dbg {if _gbbf ._cb ==_gbbf ._bd {_ece =append (_ece ,_gbbf ._cb );}else {_gcf =append (_gcf ,fbRange {_ea :_gbbf ._cb ,_cbf :_gbbf ._bd ,_cf :cmap ._bda [_gbbf ._cb ]});
};};_f .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dbg ),len (_ece ),len (_gcf ));var _ff []string ;if len (_ece )> 0{_aacd :=(len (_ece )+_bga -1)/_bga ;
for _efb :=0;_efb < _aacd ;_efb ++{_afcf :=_afcfd (len (_ece )-_efb *_bga ,_bga );_ff =append (_ff ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_afcf ));for _aee :=0;_aee < _afcf ;_aee ++{_egg :=_ece [_efb *_bga +_aee ];
_fgc :=cmap ._bda [_egg ];_ff =append (_ff ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_egg ,_edd (_fgc )));};_ff =append (_ff ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_gcf )> 0{_dbe :=(len (_gcf )+_bga -1)/_bga ;for _edb :=0;
_edb < _dbe ;_edb ++{_efafb :=_afcfd (len (_gcf )-_edb *_bga ,_bga );_ff =append (_ff ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_efafb ));for _egb :=0;_egb < _efafb ;_egb ++{_fba :=_gcf [_edb *_bga +_egb ];
_ff =append (_ff ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_fba ._ea ,_fba ._cbf ,_edd (_fba ._cf )));};_ff =append (_ff ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _cc .Join (_ff ,"\u000a");
};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )inCodespace (_fda CharCode ,_eag int )bool {for _ ,_fbf :=range cmap ._db {if _fbf .Low <=_fda &&_fda <=_fbf .High &&_eag ==_fbf .NumBytes {return true ;};};return false ;};func (cmap *CMap )parseVersion ()error {_afb :="";
_ad :=false ;for _ged :=0;_ged < 3&&!_ad ;_ged ++{_acgd ,_ced :=cmap .parseObject ();if _ced !=nil {return _ced ;};switch _dcb :=_acgd .(type ){case cmapOperand :switch _dcb .Operand {case "\u0064\u0065\u0066":_ad =true ;default:_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_acgd );
return ErrBadCMap ;};case cmapInt :_afb =_c .Sprintf ("\u0025\u0064",_dcb ._bag );case cmapFloat :_afb =_c .Sprintf ("\u0025\u0066",_dcb ._bfc );case cmapString :_afb =_dcb .String ;default:_f .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_acgd );
};};cmap ._gb =_afb ;return nil ;};func (_eggdg *cMapParser )parseString ()(cmapString ,error ){_eggdg ._ccd .ReadByte ();_dbbf :=_a .Buffer {};_eab :=1;for {_bbc ,_acea :=_eggdg ._ccd .Peek (1);if _acea !=nil {return cmapString {_dbbf .String ()},_acea ;
};if _bbc [0]=='\\'{_eggdg ._ccd .ReadByte ();_ddfg ,_fbag :=_eggdg ._ccd .ReadByte ();if _fbag !=nil {return cmapString {_dbbf .String ()},_fbag ;};if _dc .IsOctalDigit (_ddfg ){_fca ,_afe :=_eggdg ._ccd .Peek (2);if _afe !=nil {return cmapString {_dbbf .String ()},_afe ;
};var _gegd []byte ;_gegd =append (_gegd ,_ddfg );for _ ,_gceb :=range _fca {if _dc .IsOctalDigit (_gceb ){_gegd =append (_gegd ,_gceb );}else {break ;};};_eggdg ._ccd .Discard (len (_gegd )-1);_f .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gegd );
_ecag ,_afe :=_g .ParseUint (string (_gegd ),8,32);if _afe !=nil {return cmapString {_dbbf .String ()},_afe ;};_dbbf .WriteByte (byte (_ecag ));continue ;};switch _ddfg {case 'n':_dbbf .WriteByte ('\n');case 'r':_dbbf .WriteByte ('\r');case 't':_dbbf .WriteByte ('\t');
case 'b':_dbbf .WriteByte ('\b');case 'f':_dbbf .WriteByte ('\f');case '(':_dbbf .WriteByte ('(');case ')':_dbbf .WriteByte (')');case '\\':_dbbf .WriteByte ('\\');};continue ;}else if _bbc [0]=='('{_eab ++;}else if _bbc [0]==')'{_eab --;if _eab ==0{_eggdg ._ccd .ReadByte ();
break ;};};_bbad ,_ :=_eggdg ._ccd .ReadByte ();_dbbf .WriteByte (_bbad );};return cmapString {_dbbf .String ()},nil ;};const (_bga =100;_bbg ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_ecc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )WMode ()(int ,bool ){return cmap ._cdb ._eegd ,cmap ._cdb ._fbge };func _fdec (_bged cmapHexString )[]rune {if len (_bged ._dead )==1{return []rune {rune (_bged ._dead [0])};};_eegc :=_bged ._dead ;if len (_eegc )%2!=0{_eegc =append (_eegc ,0);
_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bged ,_eegc );
};_cgfd :=len (_eegc )>>1;_dac :=make ([]uint16 ,_cgfd );for _eaad :=0;_eaad < _cgfd ;_eaad ++{_dac [_eaad ]=uint16 (_eegc [_eaad <<1])<<8+uint16 (_eegc [_eaad <<1+1]);};_gdbd :=_cd .Decode (_dac );return _gdbd ;};type cmapString struct{String string ;
};func (_cdd *cMapParser )parseName ()(cmapName ,error ){_dfe :="";_cbfc :=false ;for {_cga ,_caaf :=_cdd ._ccd .Peek (1);if _caaf ==_bb .EOF {break ;};if _caaf !=nil {return cmapName {_dfe },_caaf ;};if !_cbfc {if _cga [0]=='/'{_cbfc =true ;_cdd ._ccd .ReadByte ();
}else {_f .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_cga ,_cga );return cmapName {_dfe },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cga [0]);
};}else {if _dc .IsWhiteSpace (_cga [0]){break ;}else if (_cga [0]=='/')||(_cga [0]=='[')||(_cga [0]=='(')||(_cga [0]==']')||(_cga [0]=='<')||(_cga [0]=='>'){break ;}else if _cga [0]=='#'{_gea ,_dced :=_cdd ._ccd .Peek (3);if _dced !=nil {return cmapName {_dfe },_dced ;
};_cdd ._ccd .Discard (3);_bdafc ,_dced :=_b .DecodeString (string (_gea [1:3]));if _dced !=nil {return cmapName {_dfe },_dced ;};_dfe +=string (_bdafc );}else {_gde ,_ :=_cdd ._ccd .ReadByte ();_dfe +=string (_gde );};};};return cmapName {_dfe },nil ;
};func _cee (_efd string )rune {_baf :=[]rune (_efd );return _baf [len (_baf )-1]};func _degf (_ccfg cmapHexString )CharCode {_bdeg :=CharCode (0);for _ ,_ddea :=range _ccfg ._dead {_bdeg <<=8;_bdeg |=CharCode (_ddea );};return _bdeg ;};func (cmap *CMap )parseType ()error {_aef :=0;
_eeg :=false ;for _dda :=0;_dda < 3&&!_eeg ;_dda ++{_gf ,_faa :=cmap .parseObject ();if _faa !=nil {return _faa ;};switch _abg :=_gf .(type ){case cmapOperand :switch _abg .Operand {case "\u0064\u0065\u0066":_eeg =true ;default:_f .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_gf );
return ErrBadCMap ;};case cmapInt :_aef =int (_abg ._bag );};};cmap ._bc =_aef ;return nil ;};type cmapObject interface{};type cmapInt struct{_bag int64 };func (_dgd *cMapParser )skipSpaces ()(int ,error ){_geb :=0;for {_cabd ,_aea :=_dgd ._ccd .Peek (1);
if _aea !=nil {return 0,_aea ;};if _dc .IsWhiteSpace (_cabd [0]){_dgd ._ccd .ReadByte ();_geb ++;}else {break ;};};return _geb ,nil ;};func (cmap *CMap )parseWMode ()error {var _gee int ;_eaca :=false ;for _bffb :=0;_bffb < 3&&!_eaca ;_bffb ++{_gdb ,_df :=cmap .parseObject ();
if _df !=nil {return _df ;};switch _cfb :=_gdb .(type ){case cmapOperand :switch _cfb .Operand {case "\u0064\u0065\u0066":_eaca =true ;default:_f .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_gdb );
return ErrBadCMap ;};case cmapInt :_gee =int (_cfb ._bag );};};cmap ._cdb =integer {_fbge :true ,_eegd :_gee };return nil ;};func (_dgdg *cMapParser )parseDict ()(cmapDict ,error ){_f .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_efga :=_eagf ();_gda ,_ :=_dgdg ._ccd .ReadByte ();if _gda !='<'{return _efga ,ErrBadCMapDict ;};_gda ,_ =_dgdg ._ccd .ReadByte ();if _gda !='<'{return _efga ,ErrBadCMapDict ;};for {_dgdg .skipSpaces ();_ddag ,_bad :=_dgdg ._ccd .Peek (2);if _bad !=nil {return _efga ,_bad ;
};if (_ddag [0]=='>')&&(_ddag [1]=='>'){_dgdg ._ccd .ReadByte ();_dgdg ._ccd .ReadByte ();break ;};_gcfg ,_bad :=_dgdg .parseName ();_f .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gcfg .Name );if _bad !=nil {_f .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_bad );
return _efga ,_bad ;};_dgdg .skipSpaces ();_eaeg ,_bad :=_dgdg .parseObject ();if _bad !=nil {return _efga ,_bad ;};_efga .Dict [_gcfg .Name ]=_eaeg ;_dgdg .skipSpaces ();_ddag ,_bad =_dgdg ._ccd .Peek (3);if _bad !=nil {return _efga ,_bad ;};if string (_ddag )=="\u0064\u0065\u0066"{_dgdg ._ccd .Discard (3);
};};return _efga ,nil ;};func NewCIDSystemInfo (obj _dc .PdfObject )(_fe CIDSystemInfo ,_ac error ){_dd ,_bf :=_dc .GetDict (obj );if !_bf {return CIDSystemInfo {},_dc .ErrTypeError ;};_cca ,_bf :=_dc .GetStringVal (_dd .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_bf {return CIDSystemInfo {},_dc .ErrTypeError ;};_be ,_bf :=_dc .GetStringVal (_dd .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_bf {return CIDSystemInfo {},_dc .ErrTypeError ;};_aa ,_bf :=_dc .GetIntVal (_dd .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_bf {return CIDSystemInfo {},_dc .ErrTypeError ;};return CIDSystemInfo {Registry :_cca ,Ordering :_be ,Supplement :_aa },nil ;};func (cmap *CMap )NBits ()int {return cmap ._bff };func (cmap *CMap )String ()string {_dab :=cmap ._feg ;_ead :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._bff ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bc )};
if cmap ._gb !=""{_ead =append (_ead ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._gb ));};if cmap ._fed !=""{_ead =append (_ead ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fed ));
};_ead =append (_ead ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_dab .String ()));if len (cmap ._db )> 0{_ead =append (_ead ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._db )));
};if len (cmap ._bda )> 0{_ead =append (_ead ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bda )));};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._fg ,_cc .Join (_ead ,"\u0020"));
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_cab :=make (map[CharCode ]string ,len (codeToRune ));for _eb ,_bdad :=range codeToRune {_cab [_eb ]=string (_bdad );};cmap :=&CMap {_fg :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bc :2,_bff :16,_feg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_db :[]Codespace {{Low :0,High :0xffff}},_bda :_cab ,_cg :make (map[string ]CharCode ,len (codeToRune )),_ga :make (map[CharCode ]CharCode ,len (codeToRune )),_dca :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_eg ,_cce :=cmap .BytesToCharcodes (data );if !_cce {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_aae :=make ([]string ,len (_eg ));var _baa []CharCode ;for _ae ,_eaf :=range _eg {_efa ,_fce :=cmap ._bda [_eaf ];if !_fce {_baa =append (_baa ,_eaf );_efa =MissingCodeString ;};_aae [_ae ]=_efa ;};_efac :=_cc .Join (_aae ,"");if len (_baa )> 0{_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_eg ,len (_baa ),_baa ,_efac ,cmap );
};return _efac ,len (_baa );};func (cmap *CMap )parseBfchar ()error {for {_bcec ,_fge :=cmap .parseObject ();if _fge !=nil {if _fge ==_bb .EOF {break ;};return _fge ;};var _bgb CharCode ;switch _ddab :=_bcec .(type ){case cmapOperand :if _ddab .Operand ==_fga {return nil ;
};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bgb =_degf (_ddab );default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_bcec ,_fge =cmap .parseObject ();if _fge !=nil {if _fge ==_bb .EOF {break ;};return _fge ;};var _ceg []rune ;switch _ddc :=_bcec .(type ){case cmapOperand :if _ddc .Operand ==_fga {return nil ;};_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ddc );
return ErrBadCMap ;case cmapHexString :_ceg =_fdec (_ddc );case cmapName :_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ddc );_ceg =[]rune {MissingCodeRune };
default:_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_bcec );return ErrBadCMap ;};cmap ._bda [_bgb ]=string (_ceg );};return nil ;};func _afcfd (_bdgc ,_fcg int )int {if _bdgc < _fcg {return _bdgc ;
};return _fcg ;};func (_cgcc *cMapParser )parseNumber ()(cmapObject ,error ){_aga ,_ecd :=_dc .ParseNumber (_cgcc ._ccd );if _ecd !=nil {return nil ,_ecd ;};switch _dbga :=_aga .(type ){case *_dc .PdfObjectFloat :return cmapFloat {float64 (*_dbga )},nil ;
case *_dc .PdfObjectInteger :return cmapInt {int64 (*_dbga )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aga );};type fbRange struct{_ea CharCode ;
_cbf CharCode ;_cf string ;};func (cmap *CMap )computeInverseMappings (){for _ccb ,_fb :=range cmap ._ga {if _da ,_dce :=cmap ._dca [_fb ];!_dce ||(_dce &&_da > _ccb ){cmap ._dca [_fb ]=_ccb ;};};for _acf ,_ef :=range cmap ._bda {if _gca ,_bee :=cmap ._cg [_ef ];
!_bee ||(_bee &&_gca > _acf ){cmap ._cg [_ef ]=_acf ;};};_ca .Slice (cmap ._db ,func (_cdf ,_dgf int )bool {return cmap ._db [_cdf ].Low < cmap ._db [_dgf ].Low });};func (cmap *CMap )parseCodespaceRange ()error {for {_cbfed ,_ffc :=cmap .parseObject ();
if _ffc !=nil {if _ffc ==_bb .EOF {break ;};return _ffc ;};_cfba ,_fbg :=_cbfed .(cmapHexString );if !_fbg {if _bdef ,_cae :=_cbfed .(cmapOperand );_cae {if _bdef .Operand ==_abgb {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_cbfed ,_ffc =cmap .parseObject ();if _ffc !=nil {if _ffc ==_bb .EOF {break ;};return _ffc ;};_eae ,_fbg :=_cbfed .(cmapHexString );if !_fbg {return _ee .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_cfba ._dead )!=len (_eae ._dead ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gdf :=_degf (_cfba );_bfa :=_degf (_eae );if _bfa < _gdf {_f .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gdf ,_bfa );
return ErrBadCMap ;};_cdfg :=_eae ._bdg ;_aeeb :=Codespace {NumBytes :_cdfg ,Low :_gdf ,High :_bfa };cmap ._db =append (cmap ._db ,_aeeb );_f .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gdf ,_bfa );
};if len (cmap ._db )==0{_f .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_dba *cMapParser )parseOperand ()(cmapOperand ,error ){_fgad :=cmapOperand {};
_gad :=_a .Buffer {};for {_dege ,_abgg :=_dba ._ccd .Peek (1);if _abgg !=nil {if _abgg ==_bb .EOF {break ;};return _fgad ,_abgg ;};if _dc .IsDelimiter (_dege [0]){break ;};if _dc .IsWhiteSpace (_dege [0]){break ;};_fgeb ,_ :=_dba ._ccd .ReadByte ();_gad .WriteByte (_fgeb );
};if _gad .Len ()==0{return _fgad ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_fgad .Operand =_gad .String ();return _fgad ,nil ;};func _bfe (_bba bool )*CMap {_dcaa :=16;
if _bba {_dcaa =8;};return &CMap {_bff :_dcaa ,_ga :make (map[CharCode ]CharCode ),_dca :make (map[CharCode ]CharCode ),_bda :make (map[CharCode ]string ),_cg :make (map[string ]CharCode )};};const (_ded ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_acga ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_cdg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_ddfe ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_abgb ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_gbe ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_fga ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_debf ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_aaeg ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_acb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_caga ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_eda ="\u0075s\u0065\u0063\u006d\u0061\u0070";_gge ="\u0057\u004d\u006fd\u0065";_dae ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_dgfa ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_bcg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);type cmapName struct{Name string ;};func _cdbc (_ab string )(*CMap ,error ){_bef ,_caa :=_de .Asset (_ab );if _caa !=nil {return nil ,_caa ;
};return LoadCmapFromDataCID (_bef );};func (_fee *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fee .Registry ,_fee .Ordering ,_fee .Supplement );};func _eabg (_gfb cmapHexString )rune {_acba :=_fdec (_gfb );
if _ffcd :=len (_acba );_ffcd ==0{_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gfb );
return MissingCodeRune ;};if len (_acba )> 1{_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gfb ,_acba );
};return _acba [0];};func (cmap *CMap )matchCode (_acd []byte )(_acg CharCode ,_fbb int ,_gg bool ){for _ebf :=0;_ebf < _ba ;_ebf ++{if _ebf < len (_acd ){_acg =_acg <<8|CharCode (_acd [_ebf ]);_fbb ++;};_gg =cmap .inCodespace (_acg ,_ebf +1);if _gg {return _acg ,_fbb ,true ;
};};_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_acd ,string (_acd ),cmap );
return 0,0,false ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ceb ,_fa :=cmap ._dca [cid ];return _ceb ,_fa ;};func _eagf ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_cbe ,_deg :=cmap ._ga [code ];
return _cbe ,_deg ;};type charRange struct{_cb CharCode ;_bd CharCode ;};type CMap struct{*cMapParser ;_fg string ;_bff int ;_bc int ;_gb string ;_fed string ;_feg CIDSystemInfo ;_db []Codespace ;_ga map[CharCode ]CharCode ;_dca map[CharCode ]CharCode ;
_bda map[CharCode ]string ;_cg map[string ]CharCode ;_ddf []byte ;_ddd *_dc .PdfObjectStream ;_cdb integer ;};type cmapFloat struct{_bfc float64 };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bge []CharCode ;if cmap ._bff ==8{for _ ,_efg :=range data {_bge =append (_bge ,CharCode (_efg ));
};return _bge ,true ;};for _dcd :=0;_dcd < len (data );{_egd ,_dcef ,_efgc :=cmap .matchCode (data [_dcd :]);if !_efgc {_f .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_dcd ,data ,string (data ));
return _bge ,false ;};_bge =append (_bge ,_egd );_dcd +=_dcef ;};return _bge ,true ;};func (cmap *CMap )Name ()string {return cmap ._fg };func (_fbda *cMapParser )parseArray ()(cmapArray ,error ){_adf :=cmapArray {};_adf .Array =[]cmapObject {};_fbda ._ccd .ReadByte ();
for {_fbda .skipSpaces ();_bed ,_cbd :=_fbda ._ccd .Peek (1);if _cbd !=nil {return _adf ,_cbd ;};if _bed [0]==']'{_fbda ._ccd .ReadByte ();break ;};_bgdf ,_cbd :=_fbda .parseObject ();if _cbd !=nil {return _adf ,_cbd ;};_adf .Array =append (_adf .Array ,_bgdf );
};return _adf ,nil ;};func (cmap *CMap )parse ()error {var _cabg cmapObject ;for {_ede ,_dbb :=cmap .parseObject ();if _dbb !=nil {if _dbb ==_bb .EOF {break ;};_f .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_dbb );
return _dbb ;};switch _ccee :=_ede .(type ){case cmapOperand :_gd :=_ccee ;switch _gd .Operand {case _ddfe :_fcb :=cmap .parseCodespaceRange ();if _fcb !=nil {return _fcb ;};case _acb :_egdc :=cmap .parseCIDRange ();if _egdc !=nil {return _egdc ;};case _gbe :_ggda :=cmap .parseBfchar ();
if _ggda !=nil {return _ggda ;};case _debf :_ge :=cmap .parseBfrange ();if _ge !=nil {return _ge ;};case _eda :if _cabg ==nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_ebc ,_aaef :=_cabg .(cmapName );if !_aaef {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_cabg );
return ErrBadCMap ;};cmap ._fed =_ebc .Name ;case _ded :_bbag :=cmap .parseSystemInfo ();if _bbag !=nil {return _bbag ;};};case cmapName :_eac :=_ccee ;switch _eac .Name {case _ded :_cfe :=cmap .parseSystemInfo ();if _cfe !=nil {return _cfe ;};case _dae :_bfea :=cmap .parseName ();
if _bfea !=nil {return _bfea ;};case _dgfa :_ddg :=cmap .parseType ();if _ddg !=nil {return _ddg ;};case _bcg :_gdc :=cmap .parseVersion ();if _gdc !=nil {return _gdc ;};case _gge :if _dbb =cmap .parseWMode ();_dbb !=nil {return _dbb ;};};};_cabg =_ede ;
};return nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_f .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bfe (isSimple );cmap .cMapParser =_eege (data );_bab :=cmap .parse ();if _bab !=nil {return nil ,_bab ;};if len (cmap ._db )==0{if cmap ._fed !=""{return cmap ,nil ;};_f .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cbfe ,_bdb :=cmap ._cg [s ];return _cbfe ,_bdb ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _acc ,_ccbf :=cmap ._bda [code ];
_ccbf {return _acc ,true ;};return MissingCodeString ,false ;};func _edd (_gcc string )string {_gcfc :=[]rune (_gcc );_ggd :=make ([]string ,len (_gcfc ));for _gcfb ,_dge :=range _gcfc {_ggd [_gcfb ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_dge );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_cc .Join (_ggd ,""));
};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type integer struct{_fbge bool ;_eegd int ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )Type ()int {return cmap ._bc };func (cmap *CMap )Bytes ()[]byte {_f .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ddf )> 0{return cmap ._ddf ;};cmap ._ddf =[]byte (_cc .Join ([]string {_bbg ,cmap .toBfData (),_ecc },"\u000a"));return cmap ._ddf ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_eeb :=_cdbc (name );if _eeb !=nil {return nil ,_eeb ;
};if cmap ._fed ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_aaa ,_eeb :=_cdbc (cmap ._fed );if _eeb !=nil {return nil ,_eeb ;};for _aac ,_fd :=range _aaa ._ga {if _ ,_gc :=cmap ._ga [_aac ];!_gc {cmap ._ga [_aac ]=_fd ;};};cmap ._db =append (cmap ._db ,_aaa ._db ...);
cmap .computeInverseMappings ();return cmap ,nil ;};var (ErrBadCMap =_ee .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ee .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_ee .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )parseSystemInfo ()error {_aca :=false ;_bgab :=false ;_dea :="";_eef :=false ;_bbd :=CIDSystemInfo {};for _dcc :=0;_dcc < 50&&!_eef ;_dcc ++{_bce ,_dded :=cmap .parseObject ();
if _dded !=nil {return _dded ;};switch _ebaf :=_bce .(type ){case cmapDict :_fefa :=_ebaf .Dict ;_defa ,_ccf :=_fefa ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_eaa ,_ccf :=_defa .(cmapString );if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bbd .Registry =_eaa .String ;
_defa ,_ccf =_fefa ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eaa ,_ccf =_defa .(cmapString );
if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bbd .Ordering =_eaa .String ;_ecg ,_ccf :=_fefa ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ebcd ,_ccf :=_ecg .(cmapInt );if !_ccf {_f .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bbd .Supplement =int (_ebcd ._bag );_eef =true ;case cmapOperand :switch _ebaf .Operand {case "\u0062\u0065\u0067i\u006e":_aca =true ;case "\u0065\u006e\u0064":_eef =true ;case "\u0064\u0065\u0066":_bgab =false ;};case cmapName :if _aca {_dea =_ebaf .Name ;
_bgab =true ;};case cmapString :if _bgab {switch _dea {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bbd .Registry =_ebaf .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bbd .Ordering =_ebaf .String ;};};case cmapInt :if _bgab {switch _dea {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bbd .Supplement =int (_ebaf ._bag );
};};};};if !_eef {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._feg =_bbd ;return nil ;};type cMapParser struct{_ccd *_e .Reader };func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._feg };func (cmap *CMap )Stream ()(*_dc .PdfObjectStream ,error ){if cmap ._ddd !=nil {return cmap ._ddd ,nil ;
};_daf ,_aec :=_dc .MakeStream (cmap .Bytes (),_dc .NewFlateEncoder ());if _aec !=nil {return nil ,_aec ;};cmap ._ddd =_daf ;return cmap ._ddd ,nil ;};func (_fbe *cMapParser )parseHexString ()(cmapHexString ,error ){_fbe ._ccd .ReadByte ();_cbfb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_fff :=_a .Buffer {};for {_fbe .skipSpaces ();_aaaf ,_bcb :=_fbe ._ccd .Peek (1);if _bcb !=nil {return cmapHexString {},_bcb ;};if _aaaf [0]=='>'{_fbe ._ccd .ReadByte ();break ;};_geaf ,_ :=_fbe ._ccd .ReadByte ();if _a .IndexByte (_cbfb ,_geaf )>=0{_fff .WriteByte (_geaf );
};};if _fff .Len ()%2==1{_f .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fff .String ());_fff .WriteByte ('0');};_aaca :=_fff .Len ()/2;
_cfa ,_ :=_b .DecodeString (_fff .String ());return cmapHexString {_bdg :_aaca ,_dead :_cfa },nil ;};func (cmap *CMap )parseCIDRange ()error {for {_dcf ,_caaa :=cmap .parseObject ();if _caaa !=nil {if _caaa ==_bb .EOF {break ;};return _caaa ;};_daa ,_fdc :=_dcf .(cmapHexString );
if !_fdc {if _edef ,_ddec :=_dcf .(cmapOperand );_ddec {if _edef .Operand ==_caga {return nil ;};return _ee .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_cag :=_degf (_daa );_dcf ,_caaa =cmap .parseObject ();if _caaa !=nil {if _caaa ==_bb .EOF {break ;};return _caaa ;};_dbba ,_fdc :=_dcf .(cmapHexString );if !_fdc {return _ee .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_daa ._dead )!=len (_dbba ._dead ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_aecg :=_degf (_dbba );
if _cag > _aecg {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_cag ,_aecg );
return ErrBadCMap ;};_dcf ,_caaa =cmap .parseObject ();if _caaa !=nil {if _caaa ==_bb .EOF {break ;};return _caaa ;};_bfaf ,_fdc :=_dcf .(cmapInt );if !_fdc {return _ee .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bfaf ._bag < 0{return _ee .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_adg :=_bfaf ._bag ;for _abd :=_cag ;_abd <=_aecg ;_abd ++{cmap ._ga [_abd ]=CharCode (_adg );
_adg ++;};_f .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_cag ,_aecg ,_bfaf ._bag );};return nil ;};const (_ba =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune );
);type cmapHexString struct{_bdg int ;_dead []byte ;};