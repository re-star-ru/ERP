//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_agg "crypto";_c "crypto/x509";_ef "encoding/asn1";_f "encoding/pem";_g "errors";_be "fmt";_cg "github.com/unidoc/timestamp";_df "github.com/unidoc/unipdf/v3/common";_dg "golang.org/x/crypto/ocsp";_ag "io";_bd "io/ioutil";
_b "net/http";_e "time";);

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_de ()}};func _de ()*_b .Client {return &_b .Client {Timeout :5*_e .Second }};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ab *CertClient )GetIssuer (cert *_c .Certificate )(*_c .Certificate ,error ){for _ ,_fg :=range cert .IssuingCertificateURL {_eg ,_gd :=_ab .Get (_fg );if _gd !=nil {_df .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_gd );
continue ;};return _eg ,nil ;};return nil ,_be .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _ag .Reader ,opts *_cg .RequestOptions )(*_cg .Request ,error ){if opts ==nil {opts =&_cg .RequestOptions {};};if opts .Hash ==0{opts .Hash =_agg .SHA256 ;};if !opts .Hash .Available (){return nil ,_c .ErrUnsupportedAlgorithm ;
};_bbg :=opts .Hash .New ();if _ ,_cb :=_ag .Copy (_bbg ,body );_cb !=nil {return nil ,_cb ;};return &_cg .Request {HashAlgorithm :opts .Hash ,HashedMessage :_bbg .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_b .Client ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_b .Client ;};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_de ()}};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_eb *CRLClient )MakeRequest (serverURL string ,cert *_c .Certificate )([]byte ,error ){if _eb .HTTPClient ==nil {_eb .HTTPClient =_de ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_g .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_dga ,_gf :=_eb .HTTPClient .Get (serverURL );if _gf !=nil {return nil ,_gf ;};defer _dga .Body .Close ();_fb ,_gf :=_bd .ReadAll (_dga .Body );if _gf !=nil {return nil ,_gf ;};if _dc ,_ :=_f .Decode (_fb );
_dc !=nil {_fb =_dc .Bytes ;};return _fb ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_agd *CertClient )IsCA (cert *_c .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_de (),Hash :_agg .SHA1 }};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_b .Client ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_ebf *TimestampClient )GetEncodedToken (serverURL string ,req *_cg .Request )([]byte ,error ){if serverURL ==""{return nil ,_be .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_be .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_ec ,_cab :=req .Marshal ();if _cab !=nil {return nil ,_cab ;
};_bbe :=_ebf .HTTPClient ;if _bbe ==nil {_bbe =_de ();};_ffa ,_cab :=_bbe .Post (serverURL ,"a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079",_a .NewBuffer (_ec ));
if _cab !=nil {return nil ,_cab ;};defer _ffa .Body .Close ();_db ,_cab :=_bd .ReadAll (_ffa .Body );if _cab !=nil {return nil ,_cab ;};if _ffa .StatusCode !=_b .StatusOK {return nil ,_be .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_ffa .StatusCode );
};var _efg struct{Version _ef .RawValue ;Content _ef .RawValue ;};if _ ,_cab =_ef .Unmarshal (_db ,&_efg );_cab !=nil {return nil ,_cab ;};return _efg .Content .FullBytes ,nil ;};

// Get retrieves the certificate at the specified URL.
func (_ca *CertClient )Get (url string )(*_c .Certificate ,error ){if _ca .HTTPClient ==nil {_ca .HTTPClient =_de ();};_da ,_bf :=_ca .HTTPClient .Get (url );if _bf !=nil {return nil ,_bf ;};defer _da .Body .Close ();_fa ,_bf :=_bd .ReadAll (_da .Body );
if _bf !=nil {return nil ,_bf ;};if _ge ,_ :=_f .Decode (_fa );_ge !=nil {_fa =_ge .Bytes ;};_fd ,_bf :=_c .ParseCertificate (_fa );if _bf !=nil {return nil ,_bf ;};return _fd ,nil ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_gbf *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_c .Certificate )(*_dg .Response ,[]byte ,error ){if _gbf .HTTPClient ==nil {_gbf .HTTPClient =_de ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_g .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_ad ,_gc :=_dg .CreateRequest (cert ,issuer ,&_dg .RequestOptions {Hash :_gbf .Hash });if _gc !=nil {return nil ,nil ,_gc ;};_ce ,_gc :=_gbf .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_ad ));
if _gc !=nil {return nil ,nil ,_gc ;};defer _ce .Body .Close ();_fe ,_gc :=_bd .ReadAll (_ce .Body );if _gc !=nil {return nil ,nil ,_gc ;};if _dgb ,_ :=_f .Decode (_fe );_dgb !=nil {_fe =_dgb .Bytes ;};_fae ,_gc :=_dg .ParseResponseForCert (_fe ,cert ,issuer );
if _gc !=nil {return nil ,nil ,_gc ;};return _fae ,_fe ,nil ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_b .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _agg .Hash ;};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_de ()}};