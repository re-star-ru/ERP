//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_a "errors";_cg "fmt";_ca "github.com/unidoc/unipdf/v3/core";);func (_gf *defaultDiffPolicy )compareRevisions (_e *_ca .PdfParser ,_dg *_ca .PdfParser )(*DiffResults ,error ){var _gfe error ;_gf ._d ,_gfe =_dg .GetUpdatedObjects (_e );
if _gfe !=nil {return &DiffResults {},_gfe ;};if len (_gf ._d )==0{return &DiffResults {},nil ;};_aaf :=_dg .GetRevisionNumber ();_afa ,_bc :=_ca .GetIndirect (_ca .ResolveReference (_e .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ga ,_dc :=_ca .GetIndirect (_ca .ResolveReference (_dg .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_bc ||!_dc {return &DiffResults {},_a .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_fd ,_bc :=_ca .GetDict (_ca .ResolveReference (_afa .PdfObject ));
_dge ,_dc :=_ca .GetDict (_ca .ResolveReference (_ga .PdfObject ));if !_bc ||!_dc {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _eb ,_fe :=_ca .GetIndirect (_dge .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fe {_cab ,_fa :=_ca .GetDict (_eb );if !_fa {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_ef :=make ([]_ca .PdfObject ,0);if _bcd ,_cb :=_ca .GetIndirect (_fd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_cb {if _ed ,_cd :=_ca .GetDict (_bcd );_cd {if _eff ,_bb :=_ca .GetArray (_ed .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_bb {_ef =_eff .Elements ();};};};_ee ,_fa :=_ca .GetArray (_cab .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_fa {return &DiffResults {},_a .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _cde :=_gf .compareFields (_aaf ,_ef ,_ee .Elements ());_cde !=nil {return &DiffResults {},_cde ;};};_edd ,_fed :=_ca .GetIndirect (_dge .Get ("\u0050\u0061\u0067e\u0073"));if !_fed {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_eee ,_fed :=_ca .GetIndirect (_fd .Get ("\u0050\u0061\u0067e\u0073"));if !_fed {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _eed :=_gf .comparePages (_aaf ,_eee ,_edd );_eed !=nil {return &DiffResults {},_eed ;};return _gf ._ae ,nil ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_d :nil ,_ae :&DiffResults {},_f :0};};func (_cbg *defaultDiffPolicy )comparePages (_bf int ,_bfg ,_cgf *_ca .PdfIndirectObject )error {if _ ,_fca :=_cbg ._d [_cgf .ObjectNumber ];
_fca {_cbg ._ae .addErrorWithDescription (_bf ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_ggf ,_cge :=_ca .GetDict (_cgf .PdfObject );_fcd ,_aeg :=_ca .GetDict (_bfg .PdfObject );if !_cge ||!_aeg {return _a .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_fbf ,_cge :=_ca .GetArray (_ggf .Get ("\u004b\u0069\u0064\u0073"));_bcdd ,_aeg :=_ca .GetArray (_fcd .Get ("\u004b\u0069\u0064\u0073"));if !_cge ||!_aeg {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_fbe :=_fbf .Len ();if _fbe > _bcdd .Len (){_fbe =_bcdd .Len ();};for _dgd :=0;_dgd < _fbe ;_dgd ++{_baa ,_eef :=_ca .GetIndirect (_ca .ResolveReference (_bcdd .Get (_dgd )));_ec ,_ea :=_ca .GetIndirect (_ca .ResolveReference (_fbf .Get (_dgd )));if !_eef ||!_ea {return _a .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _baa .ObjectNumber !=_ec .ObjectNumber {_cbg ._ae .addErrorWithDescription (_bf ,_cg .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_dgd ));};_afd ,_eef :=_ca .GetDict (_ec );_gca ,_ea :=_ca .GetDict (_baa );
if !_eef ||!_ea {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_ece ,_eea :=_bg (_afd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _eea !=nil {return _eea ;};_cdd ,_eea :=_bg (_gca .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _eea !=nil {return _eea ;};if _bfgf :=_cbg .compareAnnots (_bf ,_cdd ,_ece );_bfgf !=nil {return _bfgf ;};};for _agb :=_fbe +1;_agb <=_fbf .Len ();_agb ++{_cbg ._ae .addErrorWithDescription (_bf ,_cg .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_agb ));
};for _bcddd :=_fbe +1;_bcddd <=_bcdd .Len ();_bcddd ++{_cbg ._ae .addErrorWithDescription (_bf ,_cg .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_bcddd ));};return nil ;};func (_fedg *defaultDiffPolicy )compareFields (_gc int ,_dcg ,_cgd []_ca .PdfObject )error {_ba :=make (map[int64 ]*_ca .PdfObjectDictionary );
for _ ,_dcf :=range _dcg {_fg ,_cga :=_ca .GetIndirect (_dcf );if !_cga {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fdf ,_cga :=_ca .GetDict (_fg .PdfObject );
if !_cga {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ba [_fg .ObjectNumber ]=_fdf ;};for _ ,_ag :=range _cgd {_ggc ,_bae :=_ca .GetIndirect (_ag );
if !_bae {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gag ,_bae :=_ca .GetDict (_ggc .PdfObject );if !_bae {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_gag .Get ("\u0054");if _ ,_fc :=_fedg ._d [_ggc .ObjectNumber ];_fc {switch _fedg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fedg ._ae .addWarningWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_fedg ._ae .addErrorWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_ada :=_ba [_ggc .ObjectNumber ];!_ada {switch _fedg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fedg ._ae .addWarningWithDescription (_gc ,_cg .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_gag .Get ("\u0054")));
default:_fedg ._ae .addErrorWithDescription (_gc ,_cg .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_gag .Get ("\u0054")));};}else {delete (_ba ,_ggc .ObjectNumber );if _ ,_ce :=_fedg ._d [_ggc .ObjectNumber ];
_ce {switch _fedg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fedg ._ae .addWarningWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_gag .Get ("\u0054")));
default:_fedg ._ae .addErrorWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_gag .Get ("\u0054")));};};};if FT ,_fce :=_ca .GetNameVal (_gag .Get ("\u0046\u0054"));_fce {if FT =="\u0053\u0069\u0067"{if _cbe ,_ge :=_ca .GetIndirect (_gag .Get ("\u0056"));
_ge {if _ ,_fb :=_fedg ._d [_cbe .ObjectNumber ];_fb {switch _fedg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fedg ._ae .addWarningWithDescription (_gc ,_cg .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_fedg ._ae .addErrorWithDescription (_gc ,_cg .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};
};};};for _ ,_cbb :=range _ba {switch _fedg ._f {case NoRestrictions :_fedg ._ae .addWarningWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_cbb .Get ("\u0054")));default:_fedg ._ae .addErrorWithDescription (_gc ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_cbb .Get ("\u0054")));
};};return nil ;};func (_gfd *defaultDiffPolicy )compareAnnots (_cdf int ,_agf ,_cc []_ca .PdfObject )error {_dd :=make (map[int64 ]*_ca .PdfObjectDictionary );for _ ,_ac :=range _agf {_befg ,_cbgg :=_ca .GetIndirect (_ac );if !_cbgg {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_gff ,_cbgg :=_ca .GetDict (_befg .PdfObject );if !_cbgg {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_dd [_befg .ObjectNumber ]=_gff ;
};for _ ,_bca :=range _cc {_efff ,_gbe :=_ca .GetIndirect (_bca );if !_gbe {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fbg ,_gbe :=_ca .GetDict (_efff .PdfObject );
if !_gbe {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gab ,_ :=_ca .GetStringVal (_fbg .Get ("\u0054"));_bed ,_ :=_ca .GetNameVal (_fbg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_fcec :=_dd [_efff .ObjectNumber ];!_fcec {switch _gfd ._f {case NoRestrictions ,FillFormsAndAnnots :_gfd ._ae .addWarningWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bed ,_gab ));
default:_gbc ,_eaf :=_ca .GetDict (_efff .PdfObject );if !_eaf {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gdg ,_eaf :=_ca .GetNameVal (_gbc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_eaf {return _a .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _gdg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _gfd ._f {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_gfd ._ae .addWarningWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bed ,_gab ));
default:_gfd ._ae .addErrorWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bed ,_gab ));};}else {_gfd ._ae .addErrorWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bed ,_gab ));
};};}else {delete (_dd ,_efff .ObjectNumber );if _da ,_fcb :=_gfd ._d [_efff .ObjectNumber ];_fcb {switch _gfd ._f {case NoRestrictions ,FillFormsAndAnnots :_gfd ._ae .addWarningWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bed ,_gab ));
default:_aff ,_age :=_ca .GetIndirect (_da );if !_age {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_de ,_age :=_ca .GetDict (_aff .PdfObject );if !_age {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_agec ,_age :=_ca .GetNameVal (_de .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_age {return _a .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _agec =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _gfd ._f {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_gfd ._ae .addWarningWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bed ,_gab ));
default:_gfd ._ae .addErrorWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bed ,_gab ));};}else {_gfd ._ae .addErrorWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bed ,_gab ));
};};};};};for _ ,_db :=range _dd {_ff ,_ :=_ca .GetStringVal (_db .Get ("\u0054"));_gdga ,_ :=_ca .GetNameVal (_db .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _gfd ._f {case NoRestrictions ,FillFormsAndAnnots :_gfd ._ae .addWarningWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_gdga ,_ff ));
default:_gfd ._ae .addErrorWithDescription (_cdf ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_gdga ,_ff ));};};return nil ;};const (NoRestrictions DocMDPPermission =0;
NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_affe *DiffResults )addErrorWithDescription (_dce int ,_fad string ){if _affe .Errors ==nil {_affe .Errors =make ([]*DiffResult ,0);};_affe .Errors =append (_affe .Errors ,&DiffResult {Revision :_dce ,Description :_fad });
};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_gdc *DiffResults )addWarning (_dbd *DiffResult ){if _gdc .Warnings ==nil {_gdc .Warnings =make ([]*DiffResult ,0);};_gdc .Warnings =append (_gdc .Warnings ,_dbd );};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_g *defaultDiffPolicy )ReviewFile (oldParser *_ca .PdfParser ,newParser *_ca .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_a .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_a .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_g ._f =NoRestrictions ;}else {_g ._f =params .DocMDPLevel ;};_gb :=&DiffResults {};for _b :=oldParser .GetRevisionNumber ()+1;_b <=newParser .GetRevisionNumber ();_b ++{_aa ,_af :=newParser .GetRevision (_b -1);
if _af !=nil {return nil ,_af ;};_gd ,_af :=newParser .GetRevision (_b );if _af !=nil {return nil ,_af ;};_be ,_af :=_g .compareRevisions (_aa ,_gd );if _af !=nil {return nil ,_af ;};_gb .Warnings =append (_gb .Warnings ,_be .Warnings ...);_gb .Errors =append (_gb .Errors ,_be .Errors ...);
};return _gb ,nil ;};func _bg (_fbd _ca .PdfObject )([]_ca .PdfObject ,error ){_aef :=make ([]_ca .PdfObject ,0);if _fbd !=nil {_aeb :=_fbd ;if _gbcb ,_fgc :=_ca .GetIndirect (_fbd );_fgc {_aeb =_gbcb .PdfObject ;};if _fdb ,_ddg :=_ca .GetArray (_aeb );
_ddg {_aef =_fdb .Elements ();}else {return nil ,_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _aef ,nil ;};func (_agd *DiffResults )addError (_fga *DiffResult ){if _agd .Errors ==nil {_agd .Errors =make ([]*DiffResult ,0);
};_agd .Errors =append (_agd .Errors ,_fga );};

// String returns the state of the warning.
func (_ceb *DiffResult )String ()string {return _cg .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_ceb .Description ,_ceb .Revision );};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;

// IsPermitted returns true if changes permitted.
func (_aae *DiffResults )IsPermitted ()bool {return len (_aae .Errors )==0};type defaultDiffPolicy struct{_d map[int64 ]_ca .PdfObject ;_ae *DiffResults ;_f DocMDPPermission ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_gfdg *_ca .PdfParser ,_fda *_ca .PdfParser ,_fgcc *MDPParameters )(*DiffResults ,error );};func (_cef *DiffResults )addWarningWithDescription (_eab int ,_df string ){if _cef .Warnings ==nil {_cef .Warnings =make ([]*DiffResult ,0);};_cef .Warnings =append (_cef .Warnings ,&DiffResult {Revision :_eab ,Description :_df });
};